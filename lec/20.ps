%!PS-Adobe-3.0
%%BoundingBox: 25 25 587 767
%%Title: Enscript Output
%%For: Jonathan Shewchuk
%%Creator: GNU enscript 1.6.4
%%CreationDate: Wed Mar  5 22:32:36 2014
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 4
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 4
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 4
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 742 def
/d_page_h 562 def
/d_header_x 0 def
/d_header_y 526 def
/d_header_w 742 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 742 def
/d_footer_h 0 def
/d_output_w 742 def
/d_output_h 526 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 1 def
/fname (20) def
/fdir () def
/ftail (20) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (03/05/14) def
/modtimestr (22:10:55) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 516 M
(                              CS 61B: Lecture 20) s
5 508 M
(                            Monday, March 10, 2014) s
5 492 M
(Today's reading:  Goodrich & Tamassia, Chapter 4 \(especially 4.2 and 4.3\).) s
5 476 M
(ASYMPTOTIC ANALYSIS \(bounds on running time or memory\)) s
5 468 M
(===================) s
5 460 M
(Suppose an algorithm for processing a retail store's inventory takes:) s
5 452 M
(  - 10,000 milliseconds to read the initial inventory from disk, and then) s
5 444 M
(  - 10 milliseconds to process each transaction \(items acquired or sold\).) s
5 436 M
(Processing n transactions takes \(10,000 + 10 n\) ms.  Even though 10,000 >> 10,) s
5 428 M
(we sense that the "10 n" term will be more important if the number of) s
5 420 M
(transactions is very large.) s
5 404 M
(We also know that these coefficients will change if we buy a faster computer or) s
5 396 M
(disk drive, or use a different language or compiler.  We want a way to express) s
5 388 M
(the speed of an algorithm independently of a specific implementation on a) s
5 380 M
(specific machine--specifically, we want to ignore constant factors \(which get) s
5 372 M
(smaller and smaller as technology improves\).) s
5 356 M
(Big-Oh Notation \(upper bounds on a function's growth\)) s
5 348 M
(---------------) s
5 340 M
(Big-Oh notation compares how quickly two functions grow as n -> infinity.) s
5 324 M
(Let n be the size of a program's _input_ \(in bits or data words or whatever\).) s
5 316 M
(Let T\(n\) be a function.  For now, T\(n\) is the algorithm's precise running time) s
5 308 M
(  in milliseconds, given an input of size n \(usually a complicated expression\).) s
5 300 M
(Let f\(n\) be another function--preferably a simple function like f\(n\) = n.) s
5 284 M
(We say that T\(n\) is in O\( f\(n\) \)  IF AND ONLY IF   T\(n\) <= c f\(n\)) s
5 276 M
(                                  WHENEVER n IS BIG, FOR SOME LARGE CONSTANT c.) s
5 260 M
( *  HOW BIG IS "BIG"?  Big enough to make T\(n\) fit under c f\(n\).) s
5 252 M
( *  HOW LARGE IS c?  Large enough to make T\(n\) fit under c f\(n\).) s
5 236 M
(EXAMPLE:  Inventory) s
5 228 M
(-------------------) s
5 220 M
(Let's consider the function T\(n\) = 10,000 + 10 n, from our example above.) s
5 212 M
(Let's try out f\(n\) = n, because it's simple.  We can choose c as large as we) s
5 204 M
(want, and we're trying to make T\(n\) fit underneath c f\(n\), so pick c = 20.) s
5 188 M
(                     c f\(n\) = 20 n     **) s
5 180 M
(           ^                /        **) s
5 172 M
(           |       |       /       **) s
5 164 M
(           |       |      /      **) s
5 156 M
(           |       |     /     **) s
5 148 M
(           |       |    /    **  T\(n\) = 10,000 + 10 n) s
5 140 M
(   30,000  +       |   /   **) s
5 132 M
(           |       |  /  **) s
5 124 M
(           |       | / **) s
5 116 M
(           |       |/**) s
5 108 M
(   20,000  +       **) s
5 100 M
(           |     **|) s
5 92 M
(           |   **/ |) s
5 84 M
(           | ** /  |) s
5 76 M
(   10,000  **  /   |) s
5 68 M
(           |  /    |) s
5 60 M
(           | /     |) s
5 52 M
(           |/      |) s
5 44 M
(           O-------+------------------------> n) s
5 36 M
(                 1,000) s
5 20 M
(As these functions extend forever to the right, their asymptotes will never) s
5 12 M
(cross again.  For large n--any n bigger than 1,000, in fact--T\(n\) <= c f\(n\).) s
5 4 M
(                 ***  THEREFORE, T\(n\) is in O\(f\(n\)\).  ***) s
376 508 M
(Next, you must learn how to express this idea rigorously.  Here is the) s
376 500 M
(central lesson of today's lecture, which will bear on your entire career as) s
376 492 M
(a professional computer scientist, however abstruse it may seem now:) s
376 476 M
(|=============================================================================|) s
376 468 M
(| FORMALLY:  O\(f\(n\)\) is the SET of ALL functions T\(n\) that satisfy:           |) s
376 460 M
(|                                                                             |) s
376 452 M
(|   There exist positive constants c and N such that, for all n >= N,         |) s
376 444 M
(|                              T\(n\) <= c f\(n\)                                 |) s
376 436 M
(|=============================================================================|) s
376 420 M
(Pay close attention to c and N.  In the graph above, c = 20, and N = 1,000.) s
376 404 M
(Think of it this way:  if you're trying to prove that one function is) s
376 396 M
(asymptotically bounded by another [f\(n\) is in O\(g\(n\)\)], you're allowed to) s
376 388 M
(multiply them by positive constants in an attempt to stuff one underneath the) s
376 380 M
(other.  You're also allowed to move the vertical line \(N\) as far to the right) s
376 372 M
(as you like \(to get all the crossings onto the left side\).  We're only) s
376 364 M
(interested in how the functions behave as n shoots off toward infinity.) s
376 348 M
(EXAMPLES:  Some Important Corollaries) s
376 340 M
(-------------------------------------) s
376 332 M
([1]  1,000,000 n  is in  O\(n\).                Proof:  set c = 1,000,000, N = 0.) s
376 324 M
(  -> Therefore, Big-Oh notation doesn't care about \(most\) constant factors.) s
376 316 M
(     We generally leave constants out; it's unnecessary to write O\(2n\),) s
376 308 M
(     because O\(2n\) = O\(n\).  \(The 2 is not wrong; just unnecessary.\)) s
376 292 M
([2]  n  is in  O\(n^3\).  [That's n cubed].             Proof:  set c = 1, N = 1.) s
376 284 M
(  -> Therefore, Big-Oh notation can be misleading.  Just because an algorithm's) s
376 276 M
(     running time is in O\(n^3\) doesn't mean it's slow; it might also be in) s
376 268 M
(     O\(n\).  Big-Oh notation only gives us an UPPER BOUND on a function.) s
376 252 M
(              c f\(n\) = n^3) s
376 244 M
(           ^        *      /) s
376 236 M
(           |        *     /) s
376 228 M
(           |        *    / T\(n\) = n) s
376 220 M
(           |        *   /) s
376 212 M
(           |        *  /) s
376 204 M
(           |        * /) s
376 196 M
(           |       * /) s
376 188 M
(           |       */) s
376 180 M
(       1   +       *) s
376 172 M
(           |      /*) s
376 164 M
(           |     / *) s
376 156 M
(           |    / *|) s
376 148 M
(           |   /  *|) s
376 140 M
(           |  /   *|) s
376 132 M
(           | /   * |) s
376 124 M
(           |/  **  |) s
376 116 M
(           O***----+------------------------> n) s
376 108 M
(                 N = 1) s
376 92 M
([3]  n^3 + n^2 + n  is in  O\(n^3\).                    Proof:  set c = 3, N = 1.) s
376 84 M
(  -> Big-Oh notation is usually used only to indicate the dominating \(largest) s
376 76 M
(     and most displeasing\) term in the function.  The other terms become) s
376 68 M
(     insignificant when n is really big.) s
376 52 M
(     Here's a table to help you figure out the dominating term.) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 2 def
/fname (20) def
/fdir () def
/ftail (20) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (03/05/14) def
/modtimestr (22:10:55) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 508 M
(Table of Important Big-Oh Sets) s
5 500 M
(------------------------------) s
5 492 M
(Arranged from smallest to largest, happiest to saddest, in order of increasing) s
5 484 M
(domination:) s
5 468 M
(                      function              common name) s
5 460 M
(                      --------              -----------) s
5 452 M
(                   O\(     1     \)       ::  constant) s
5 444 M
(    is a subset of O\(   log n   \)       ::  logarithmic) s
5 436 M
(    is a subset of O\(  log^2 n  \)       ::  log-squared [that's \(log n\)^2 ]) s
5 428 M
(    is a subset of O\(  root\(n\)  \)       ::  root-n [that's the square root]) s
5 420 M
(    is a subset of O\(     n     \)       ::  linear) s
5 412 M
(    is a subset of O\(  n log n  \)       ::  n log n) s
5 404 M
(    is a subset of O\(    n^2    \)       ::  quadratic) s
5 396 M
(    is a subset of O\(    n^3    \)       ::  cubic) s
5 388 M
(    is a subset of O\(    n^4    \)       ::  quartic) s
5 380 M
(    is a subset of O\(    2^n    \)       ::  exponential) s
5 372 M
(    is a subset of O\(    e^n    \)       ::  exponential \(but more so\)) s
5 356 M
(Algorithms that run in O\(n log n\) time or faster are considered efficient.) s
5 348 M
(Algorithms that take n^7 time or more are usually considered useless.  In the) s
5 340 M
(region between n log n and n^7, the usefulness of an algorithm depends on the) s
5 332 M
(typical input sizes and the associated constants hidden by the Big-Oh notation.) s
5 316 M
(If you're not thoroughly comfortable with logarithms, read Sections 4.1.2 and) s
5 308 M
(4.1.7 of Goodrich & Tamassia carefully.  Computer scientists need to know) s
5 300 M
(logarithms in their bones.) s
376 508 M
(Warnings) s
376 500 M
(--------) s
376 492 M
([1]  Here's a fallacious proof:) s
376 476 M
(     n^2  is in  O\(n\), because if we choose c = n, we get n^2 <= n^2.) s
376 468 M
(  -> WRONG!  c must be a constant; it cannot depend on n.) s
376 452 M
([2]  The big-Oh notation expresses a relationship between functions.) s
376 444 M
(     IT DOES NOT SAY WHAT THE FUNCTIONS MEAN.  In particular, the function on) s
376 436 M
(     the left does not need to be the worst-case running time, though it often) s
376 428 M
(     is.  The number of emails you send to your Mom as a function of time might) s
376 420 M
(     be in O\(t^2\).  In that case, not only are you a very good child; you're an) s
376 412 M
(     increasingly good child.) s
376 396 M
(     In binary search on an array,) s
376 380 M
(     - the worst-case running time is in O\(log n\),) s
376 372 M
(     - the best-case running time is in O\(1\),) s
376 364 M
(     - the memory use is in O\(n\), and) s
376 356 M
(     - 47 + 18 log n - 3/n is in O\(the worst-case running time\).) s
376 340 M
(     Every semester, a few students get the wrong idea that "big-Oh" always) s
376 332 M
(     means "worst-case running time."  Their brains short out when an exam) s
376 324 M
(     question uses it some other way.) s
376 308 M
([3]  "e^3n is in O\(e^n\) because constant factors don't matter.") s
376 300 M
(     "10^n is in O\(2^n\) because constant factors don't matter.") s
376 292 M
(  -> WRONG!  I said that Big-Oh notation doesn't care about \(most\) constant) s
376 284 M
(     factors.  Here are some of the exceptions.  A constant factor in an) s
376 276 M
(     exponent is not the same as a constant factor in front of a term.) s
376 268 M
(     e^3n is not bigger than e^n by a constant factor; it's bigger by a factor) s
376 260 M
(     of e^2n, which is damn big.  Likewise, 10^n is bigger than 2^n by a factor) s
376 252 M
(     of 5^n.) s
376 236 M
([4]  Big-Oh notation doesn't tell the whole story, because it leaves out the) s
376 228 M
(     constants.  If one algorithm runs in time T\(n\) = n log_2 n, and another) s
376 220 M
(     algorithm runs in time U\(n\) = 100 n, then Big-Oh notation suggests you) s
376 212 M
(     should use U\(n\), because T\(n\) dominates U\(n\) asymptotically.  However,) s
376 204 M
(     U\(n\) is only faster than T\(n\) in practice if your input size is greater) s
376 196 M
(     than current estimates of the number of subatomic particles in the) s
376 188 M
(     universe.  The base-two logarithm log_2 n < 50 for any input size n you) s
376 180 M
(     are ever likely to encounter.) s
376 164 M
(     Nevertheless, Big-Oh notation is still a good rule of thumb, because the) s
376 156 M
(     hidden constants in real-world algorithms usually aren't that big.) s
_R
S
%%Trailer
%%Pages: 2
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
