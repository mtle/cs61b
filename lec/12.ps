%!PS-Adobe-3.0
%%BoundingBox: 25 25 587 767
%%Title: Enscript Output
%%For: Jonathan R. Shewchuk
%%Creator: GNU enscript 1.6.4
%%CreationDate: Sat Feb 15 05:38:21 2014
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 4
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 4
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 4
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 742 def
/d_page_h 562 def
/d_header_x 0 def
/d_header_y 526 def
/d_header_w 742 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 742 def
/d_footer_h 0 def
/d_output_w 742 def
/d_output_h 526 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 1 def
/fname (12) def
/fdir () def
/ftail (12) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (02/15/14) def
/modtimestr (05:35:51) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 516 M
(                              CS 61B: Lecture 12) s
5 508 M
(                         Wednesday, February 19, 2014) s
5 492 M
(Today's reading:  Sierra & Bates, Chapter 8.) s
5 476 M
(ABSTRACT CLASSES) s
5 468 M
(================) s
5 460 M
(An abstract class is a class whose sole purpose is to be extended.) s
5 444 M
(public abstract class List {) s
5 436 M
(  protected int size;) s
5 420 M
(  public int length\(\) {) s
5 412 M
(    return size;) s
5 404 M
(  }) s
5 388 M
(  public abstract void insertFront\(Object item\);) s
5 380 M
(}) s
5 364 M
(Abstract classes don't allow you to create objects directly.  You can declare a) s
5 356 M
(variable of type List, but you can't create a List object.) s
5 340 M
(  List myList;                 // Right on.) s
5 332 M
(  myList = new List\(\);         // COMPILE-TIME ERROR.) s
5 316 M
(However, abstract classes can be extended in the same way as ordinary classes,) s
5 308 M
(and the subclasses are usually not abstract.  \(They can be, but usually they're) s
5 300 M
(normal subclasses with complete implementations.\)) s
5 284 M
(The abstract List class above includes an abstract method, insertFront.  An) s
5 276 M
(abstract method lacks an implementation.  One purpose of an abstract method is) s
5 268 M
(to guarantee that every non-abstract subclass will implement the method.) s
5 260 M
(Specifically, every non-abstract subclass of List must have an implementation) s
5 252 M
(for the insertFront method.) s
5 236 M
(  public class SList extends List {) s
5 228 M
(    // inherits the "size" field.) s
5 220 M
(    protected SListNode head;) s
5 204 M
(    // inherits the "length" method.) s
5 188 M
(    public void insertFront\(Object item\) {) s
5 180 M
(      head = new SListNode\(item, head\);) s
5 172 M
(      size++;) s
5 164 M
(    }  ) s
5 156 M
(  }) s
5 140 M
(If you leave out the implementation of insertFront in SList, the Java compiler) s
5 132 M
(will complain that you must provide one.  A non-abstract class may never) s
5 124 M
(contain an abstract method, nor inherit one without providing an) s
5 116 M
(implementation.) s
5 100 M
(Because SList is not abstract, we can create SList objects; and because SLists) s
5 92 M
(are Lists, we can assign an SList to a List variable.) s
5 76 M
(  List myList = new SList\(\);   // Right on.) s
5 68 M
(  myList.insertFront\(obj\);     // Right on.) s
376 508 M
(What are abstract classes good for?  It's all about the interface.) s
376 492 M
(             ----------------------------------------------------) s
376 484 M
(             |  An abstract class lets you define an interface  |) s
376 476 M
(             |    - for multiple classes to share,              |) s
376 468 M
(             |    - without defining any of them yet.           |) s
376 460 M
(             ----------------------------------------------------) s
376 444 M
(Let's consider the List class.  Although the List class is abstract, it is an) s
376 436 M
(ADT--even without any implementation!-- because it has an interface with public) s
376 428 M
(method prototypes and well-defined behaviors.  We can implement an) s
376 420 M
(algorithm--for example, a list sorter--based on the List interface, without) s
376 412 M
(ever knowing how the lists will be implemented.  One list sorter can sort every) s
376 404 M
(kind of List.) s
376 388 M
(  public void listSort\(List l\) { ... }) s
376 372 M
(In another part of the universe, your project partners can build lots of) s
376 364 M
(subclasses of List:  SList, DList, TailList, and so on.  They can also build) s
376 356 M
(special-case List subclasses: for example, a TimedList that records the amount) s
376 348 M
(of time spent doing List operations, and a TransactionList that logs all) s
376 340 M
(changes made to the list on a disk so that all information can be recovered if) s
376 332 M
(a power outage occurs.  A library catalogue application that uses DLists can) s
376 324 M
(send them to your listSort algorithm to be sorted.  An airline flight database) s
376 316 M
(that uses TransactionLists can send them to you for sorting, too, and you don't) s
376 308 M
(have to change a line of sorting code.  You may have written your list sorter) s
376 300 M
(years before TransactionLists were ever thought of.) s
376 284 M
(    -----------------   The list sorter is built on the foundation of a list  ) s
376 276 M
(    |  Application  |   ADT, and the application is built on the foundation of) s
376 268 M
(    -----------------   the list sorter.  However, it's the application, and  ) s
376 260 M
(            |           not the list sorter, that gets to choose what kind of ) s
376 252 M
(            | calls     list is actually used, and thereby obtains special    ) s
376 244 M
(            v           features like transaction logging.  This is a big     ) s
376 236 M
(    -----------------   advantage of object-oriented languages like Java.     ) s
376 228 M
(    |  List Sorter  |) s
376 220 M
(    -----------------) s
376 212 M
(            |) s
376 204 M
(            | calls) s
376 196 M
(            v) s
376 188 M
(    -----------------) s
376 180 M
(    |   List ADT    |) s
376 172 M
(    -----------------) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 2 def
/fname (12) def
/fdir () def
/ftail (12) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (02/15/14) def
/modtimestr (05:35:51) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 508 M
(JAVA INTERFACES) s
5 500 M
(===============) s
5 492 M
(Java has an "interface" keyword which refers to something quite different than) s
5 484 M
(the interfaces I defined in Lecture 8, even though the two interfaces are) s
5 476 M
(related.  Henceforth, when I say "interfaces" I mean public fields, public) s
5 468 M
(method prototypes, and the behaviors of public methods.  When I say "Java) s
5 460 M
(interfaces" I mean Java's "interface" keyword.) s
5 444 M
(A Java interface is just like an abstract class, except for two differences.) s
5 436 M
(\(1\)  In Java, a class can inherit from only one class, even if the superclass) s
5 428 M
(     is an abstract class.  However, a class can "implement" \(inherit from\) as) s
5 420 M
(     many Java interfaces as you like.) s
5 412 M
(\(2\)  A Java interface cannot implement any methods, nor can it include any) s
5 404 M
(     fields except "final static" constants.  It only contains method) s
5 396 M
(     prototypes and constants.) s
5 380 M
(  public interface Nukeable {               // In Nukeable.java) s
5 372 M
(    public void nuke\(\);) s
5 364 M
(  }) s
5 348 M
(  public interface Comparable {             // In java.lang) s
5 340 M
(    public int compareTo\(Object o\);) s
5 332 M
(  }) s
5 316 M
(  public class SList extends List implements Nukeable, Comparable {) s
5 308 M
(    [Previous stuff here.]) s
5 292 M
(    public void nuke\(\) {) s
5 284 M
(      head = null;) s
5 276 M
(      size = 0;) s
5 268 M
(    }) s
5 252 M
(    public int compareTo\(Object o\) {) s
5 244 M
(      [Returns a number < 0 if this < o,) s
5 236 M
(                          0 if this.equals\(o\), ) s
5 228 M
(                        > 0 if this > o.]) s
5 220 M
(    }) s
5 212 M
(  }) s
5 196 M
(Observe that the method prototypes in a Java interface may be declared without) s
5 188 M
(the "abstract" keyword, because it would be redundant; a Java interface cannot) s
5 180 M
(contain a method implementation.) s
5 164 M
(The distinction between abstract classes and Java interfaces exists because of) s
5 156 M
(technical reasons that you might begin to understand if you take CS 164) s
5 148 M
(\(Compilers\).  Some languages, like C++, allow "multiple inheritance," so that a) s
5 140 M
(subclass can inherit from several superclasses.  Java does not allow multiple) s
5 132 M
(inheritance in its full generality, but it offers a sort of crippled form of) s
5 124 M
(multiple inheritance:  a class can "implement" multiple Java interfaces.) s
5 108 M
(Why does Java have this limitation?  Multiple inheritance introduces a lot of) s
5 100 M
(problems in both the definition of a language and the efficient implementation) s
5 92 M
(of a language.  For example, what should we do if a class inherits from two) s
5 84 M
(different superclasses two different methods or fields with the same name?) s
5 76 M
(Multiple inheritance is responsible for some of the scariest tricks and traps) s
5 68 M
(of the C++ language, subtleties that cause much wailing and gnashing of teeth.) s
5 60 M
(Java interfaces don't have these problems.) s
376 508 M
(Because an SList is a Nukeable and a Comparable, we can assign it to variables) s
376 500 M
(of these types.) s
376 484 M
(  Nukeable n = new SList\(\);) s
376 476 M
(  Comparable c = \(Comparable\) n;) s
376 460 M
(The cast is required because not every Nukeable is a Comparable.) s
376 444 M
("Comparable" is a standard interface in the Java library.  By having a class) s
376 436 M
(implement Comparable, you immediately gain access to Java's sorting library.) s
376 428 M
(For instance, the Arrays class in java.util includes a method that sorts arrays) s
376 420 M
(of Comparable objects.) s
376 404 M
(  public static void sort\(Object[] a\)       // In java.util) s
376 388 M
(The parameter's type is Object[], but a run-time error will occur if any item) s
376 380 M
(stored in a is not a Comparable.) s
376 364 M
(Interfaces can be extended with subinterfaces.  A subinterface can have) s
376 356 M
(multiple superinterfaces, so we can group several interfaces into one.) s
376 340 M
(  public interface NukeAndCompare extends Nukeable, Comparable { }) s
376 324 M
(We could also add more method prototypes and constants, but in this example) s
376 316 M
(I don't.) s
_R
S
%%Trailer
%%Pages: 2
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
