%!PS-Adobe-3.0
%%BoundingBox: 25 25 587 767
%%Title: Enscript Output
%%For: Jonathan R. Shewchuk
%%Creator: GNU Enscript 1.6.6
%%CreationDate: Fri Apr 18 21:22:45 2014
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 6
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 6
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 6
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 742 def
/d_page_h 562 def
/d_header_x 0 def
/d_header_y 526 def
/d_header_w 742 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 742 def
/d_footer_h 0 def
/d_output_w 742 def
/d_output_h 526 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 1 def
/fname (35) def
/fdir (.) def
/ftail (35) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (04/18/14) def
/modtimestr (21:22:43) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 516 M
(                              CS 61B: Lecture 35) s
5 508 M
(                            Monday, April 21, 2014) s
5 492 M
(Today's reading:  Goodrich & Tamassia, Sections 11.3.2.) s
5 476 M
(Counting Sort) s
5 468 M
(-------------) s
5 460 M
(If the items we sort are naked keys, with no associated values, bucket sort) s
5 452 M
(can be simplified to become _counting_sort_.  In counting sort, we use no) s
5 444 M
(queues at all; we need merely keep a count of how many copies of each key we) s
5 436 M
(have encountered.  Suppose we sort 6 7 3 0 3 1 5 0 3 7:) s
5 420 M
(               0       1       2       3       4       5       6       7) s
5 412 M
(           -----------------------------------------------------------------) s
5 404 M
(    counts |   2   |   1   |   0   |   3   |   0   |   1   |   1   |   2   |) s
5 396 M
(           -----------------------------------------------------------------) s
5 380 M
(When we are finished counting, it is straightforward to reconstruct the sorted) s
5 372 M
(keys from the counts:  0 0 1 3 3 3 5 6 7 7.) s
5 356 M
(Counting Sort with Complete Items) s
5 348 M
(---------------------------------) s
5 340 M
(Now let's go back to the case where we have complete items \(key plus associated) s
5 332 M
(value\).  We can use a more elaborate version of counting sort.  The trick is to) s
5 324 M
(use the counts to find the right index to move each item to.) s
5 308 M
(Let x be an input array of objects with keys \(and perhaps other information\).) s
5 292 M
(        0      1      2      3      4      5      6      7      8      9   ) s
5 284 M
(    -----------------------------------------------------------------------) s
5 276 M
(  x |   .  |   .  |   .  |   .  |   .  |   .  |   .  |   .  |   .  |   .  |) s
5 268 M
(    ----|------|------|------|------|------|------|------|------|------|---) s
5 260 M
(        v      v      v      v      v      v      v      v      v      v   ) s
5 252 M
(      -----  -----  -----  -----  -----  -----  -----  -----  -----  -----) s
5 244 M
(      | 6 |  | 7 |  | 3 |  | 0 |  | 3 |  | 1 |  | 5 |  | 0 |  | 3 |  | 7 |) s
5 236 M
(      -----  -----  -----  -----  -----  -----  -----  -----  -----  -----) s
5 220 M
(Begin by counting the keys in x.) s
5 204 M
(  for \(i = 0; i < x.length; i++\) {) s
5 196 M
(    counts[x[i].key]++;) s
5 188 M
(  }) s
5 172 M
(Next, do a _scan_ of the "counts" array so that counts[i] contains the number) s
5 164 M
(of keys _less_than_ i.) s
5 148 M
(               0       1       2       3       4       5       6       7) s
5 140 M
(           -----------------------------------------------------------------) s
5 132 M
(    counts |   0   |   2   |   3   |   3   |   6   |   6   |   7   |   8   |) s
5 124 M
(           -----------------------------------------------------------------) s
5 108 M
(  total = 0;) s
5 100 M
(  for \(j = 0; j < counts.length; j++\) {) s
5 92 M
(    c = counts[j];) s
5 84 M
(    counts[j] = total;) s
5 76 M
(    total = total + c;) s
5 68 M
(  }) s
5 52 M
(Let y be the output array, where we will put the sorted objects.  counts[i]) s
5 44 M
(tells us the first index of y where we should put items with key i.  Walk) s
5 36 M
(through the array x and copy each item to its final position in y.  When you) s
5 28 M
(copy an item with key k, you must increment counts[k] to make sure that the) s
5 20 M
(next item with key k goes into the next slot.) s
376 508 M
(  for \(i = 0; i < x.length; i++\) {) s
376 500 M
(    y[counts[x[i].key]] = x[i];) s
376 492 M
(    counts[x[i].key]++;) s
376 484 M
(  }) s
376 468 M
(      ---------------------           ---------------------------------) s
376 460 M
(    y |.|.|.|.|.|.|.|.|.|.|    counts | 0 | 2 | 3 | 3 | 6 | 6 | 8 | 8 |) s
376 452 M
(      ---------------|-----           ---------------------------------) s
376 444 M
(                     v) s
376 436 M
(                     6) s
376 420 M
(      ---------------------           ---------------------------------) s
376 412 M
(    y |.|.|.|.|.|.|.|.|.|.|    counts | 0 | 2 | 3 | 3 | 6 | 6 | 8 | 9 |) s
376 404 M
(      ---------------|-|---           ---------------------------------) s
376 396 M
(                     v v) s
376 388 M
(                     6 7) s
376 372 M
(      ---------------------           ---------------------------------) s
376 364 M
(    y |.|.|.|.|.|.|.|.|.|.|    counts | 0 | 2 | 3 | 4 | 6 | 6 | 8 | 9 |) s
376 356 M
(      -------|-------|-|---           ---------------------------------) s
376 348 M
(             v       v v) s
376 340 M
(             3       6 7) s
376 324 M
(      ---------------------           ---------------------------------) s
376 316 M
(    y |.|.|.|.|.|.|.|.|.|.|    counts | 1 | 2 | 3 | 4 | 6 | 6 | 8 | 9 |) s
376 308 M
(      -|-----|-------|-|---           ---------------------------------) s
376 300 M
(       v     v       v v) s
376 292 M
(       0     3       6 7) s
376 276 M
(      ---------------------           ---------------------------------) s
376 268 M
(    y |.|.|.|.|.|.|.|.|.|.|    counts | 1 | 2 | 3 | 5 | 6 | 6 | 8 | 9 |) s
376 260 M
(      -|-----|-|-----|-|---           ---------------------------------) s
376 252 M
(       v     v v     v v) s
376 244 M
(       0     3 3     6 7) s
376 228 M
(      ---------------------           ---------------------------------) s
376 220 M
(    y |.|.|.|.|.|.|.|.|.|.|    counts | 1 | 3 | 3 | 5 | 6 | 6 | 8 | 9 |) s
376 212 M
(      -|---|-|-|-----|-|---           ---------------------------------) s
376 204 M
(       v   v v v     v v) s
376 196 M
(       0   1 3 3     6 7) s
376 180 M
(...) s
376 164 M
(      ---------------------           ----------------------------------) s
376 156 M
(    y |.|.|.|.|.|.|.|.|.|.|    counts | 2 | 3 | 3 | 6 | 6 | 7 | 8 | 10 |) s
376 148 M
(      -|-|-|-|-|-|-|-|-|-|-           ----------------------------------) s
376 140 M
(       v v v v v v v v v v) s
376 132 M
(       0 0 1 3 3 3 5 6 7 7) s
376 116 M
(Bucket sort and counting sort both take O\(q + n\) time.  If q is in O\(n\), then) s
376 108 M
(they take O\(n\) time.  If you're sorting an array, counting sort is slightly) s
376 100 M
(faster and takes less memory than bucket sort, though it's a little harder to) s
376 92 M
(understand.  If you're sorting a linked list, bucket sort is more natural,) s
376 84 M
(because you've already got listnodes ready to put into the buckets.) s
376 68 M
(However, if q is not in O\(n\)--there are many more _possible_values_ for keys) s
376 60 M
(than keys--we need a more aggressive method to get linear-time performance.) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 2 def
/fname (35) def
/fdir (.) def
/ftail (35) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (04/18/14) def
/modtimestr (21:22:43) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 508 M
(Radix Sort) s
5 500 M
(----------) s
5 492 M
(Suppose we want to sort 1,000 items in the range from 0 to 99,999,999.  If we) s
5 484 M
(use bucket sort, we'll spend so much time initializing and concatenating empty) s
5 476 M
(queues we'll wish we'd used selection sort instead.) s
5 460 M
(Instead of providing 100 million buckets, let's provide q = 10 buckets and sort) s
5 452 M
(on the first digit only.  \(A number less than 10 million is said to have a) s
5 444 M
(first digit of zero.\)  We use bucket sort or counting sort, treating each item) s
5 436 M
(as if its key is the first digit of its true key.) s
5 420 M
(        0      1      2      3      4      5      6      7      8      9   ) s
5 412 M
(    -----------------------------------------------------------------------) s
5 404 M
(    |   .  |   .  |   *  |   .  |   *  |   .  |   .  |   .  |   *  |   .  |) s
5 396 M
(    ----|------|-------------|-------------|------|------|-------------|---) s
5 388 M
(        v      v             v             v      v      v             v   ) s
5 380 M
(     ------ ------        ------        ------ ------ ------        ------ ) s
5 372 M
(     | 342| |1390|        |3950|        |5384| |6395| |7394|        |9362| ) s
5 364 M
(     |9583| |5849|        |8883|        |2356| |1200| |2039|        |9193| ) s
5 356 M
(     ---|-- ------        ---|--        ------ ------ ---|--        ---|-- ) s
5 348 M
(        v                    v                           v             v   ) s
5 340 M
(     ------               ------                      ------        ------ ) s
5 332 M
(     |  59|               |3693|                      |7104|        |9993| ) s
5 324 M
(     |2178|               |7834|                      |2114|        |3949| ) s
5 316 M
(     ------               ------                      ------        ------ ) s
5 300 M
(Once we've dealt all 1,000 items into ten queues, we could sort each queue) s
5 292 M
(recursively on the second digit; then sort the resulting queues on the third) s
5 284 M
(digit, and so on.  Unfortunately, this tends to break the set of input items) s
5 276 M
(into smaller and smaller subsets, each of which will be sorted relatively) s
5 268 M
(inefficiently.) s
5 252 M
(Instead, we use a clever but counterintuitive idea:  we'll keep all the numbers) s
5 244 M
(together in one big pile throughout the sort; but we'll sort on the _last_) s
5 236 M
(digit first, then the next-to-last, and so on up to the most significant digit.) s
5 220 M
(The reason this idea works is because bucket sort and counting sort are stable.) s
5 212 M
(Hence, once we've sorted on the last digit, the numbers 55,555,552 and) s
5 204 M
(55,555,558 will remain ever after in sorted order, because their other digits) s
5 196 M
(will be sorted stably.  Consider an example with three-digit numbers:) s
5 180 M
(Sort on 1s:    771 721 822 955 405   5 925 825 777  28 829) s
5 172 M
(Sort on 10s:   405   5 721 822 925 825  28 829 955 771 777) s
5 164 M
(Sort on 100s:    5  28 405 721 771 777 822 825 829 925 955) s
5 148 M
(After we sort on the middle digit, observe that the numbers are sorted by their) s
5 140 M
(last two digits.  After we sort on the most significant digit, the numbers are) s
5 132 M
(completely sorted.) s
5 116 M
(Returning to our eight-digit example, we can do better than sorting on one) s
5 108 M
(decimal digit at a time.  With 1,000 keys, sorting would likely be faster if) s
5 100 M
(we sort on two digits at a time \(using a base, or _radix_, of q = 100\) or even) s
5 92 M
(three \(using a radix of q = 1,000\).  Furthermore, there's no need to use) s
5 84 M
(decimal digits at all; on computers, it's more natural to choose a power-of-two) s
5 76 M
(radix like q = 256.  Base-256 digits are easier to extract from a key, because) s
5 68 M
(we can quickly pull out the eight bits that we need by using bit operators) s
5 60 M
(\(which you'll study in detail in CS 61C\).) s
5 44 M
(Note that q is both the number of buckets we're using to sort, and the radix of) s
5 36 M
(the digit we use as a sort key during one pass of bucket or counting sort.) s
5 28 M
("Radix" is a synonym for the base of a number, hence the name "radix sort.") s
376 508 M
(How many passes must we perform?  Each pass inspects log2 q bits of each key.) s
376 500 M
(If all the keys can be represented in b bits, the number of passes is) s
376 492 M
(ceiling\(b / log2 q\).  So the running time of radix sort is in) s
376 476 M
(                         b) s
376 468 M
(  O\( \(n + q\) ceiling\( ------ \) \).) s
376 460 M
(                      log  q) s
376 452 M
(                         2) s
376 436 M
(How should we choose the number of queues q?  Let's choose q to be in O\(n\), so) s
376 428 M
(each pass of bucket sort or counting sort takes O\(n\) time.  However, we want) s
376 420 M
(q to be large enough to keep the number of passes small.  Therefore, let's) s
376 412 M
(choose q to be approximately n.  With this choice, the number of passes is in) s
376 404 M
(O\(1 + b / log2 n\), and radix sort takes) s
376 388 M
(          b) s
376 380 M
(  O\(n + ----- n\) time.) s
376 372 M
(        log n) s
376 356 M
(For many kinds of keys we might sort \(like ints\), b is technically a constant,) s
376 348 M
(and radix sort takes linear time.  Even if the key length b tends to grow) s
376 340 M
(logarithmically with n \(a reasonable model in many applications\), radix sort) s
376 332 M
(runs in time linear in the total number of bits in all the keys together.) s
376 316 M
(A practical, efficient choice is to make q equal to n rounded down to the next) s
376 308 M
(power of two.  If we want to keep memory use low, however, we can make q equal) s
376 300 M
(to the square root of n, rounded to the nearest power of two.  With this) s
376 292 M
(choice, the number of buckets is far smaller, but we only double the number of) s
376 284 M
(passes.) s
376 268 M
(Postscript:  Radix Sort Rocks \(not examinable\)) s
376 260 M
(-----------------------------) s
376 252 M
(Linear-time sorts tend to get less attention than comparison-based sorts in) s
376 244 M
(most computer science classes and textbooks.  Perhaps this is because the) s
376 236 M
(theory behind linear-time sorts isn't as interesting as for other algorithms.) s
376 228 M
(Nevertheless, the library sort routines for machines like Crays use radix sort,) s
376 220 M
(because it kicks major ass in the speed department.) s
376 204 M
(Radix sort can be used not only with integers, but with almost any data that) s
376 196 M
(can be compared bitwise, like strings.  The IEEE standard for floating-point) s
376 188 M
(numbers is designed to work with radix sort combined with a simple prepass and) s
376 180 M
(postpass \(to flip the bits, except the sign bit, of each negative number\).) s
376 164 M
(Strings of different lengths can be sorted in time proportional to the total) s
376 156 M
(length of the strings.  A first stage sorts the strings by their lengths.  A) s
376 148 M
(second stage sorts the strings character by character \(or several characters at) s
376 140 M
(a time\), starting with the last character of the longest string and working) s
376 132 M
(backward to the first character of every string.  We don't sort every string) s
376 124 M
(during every pass of the second stage; instead, a string is included in a pass) s
376 116 M
(only if it has a character in the appropriate place.) s
376 100 M
(For instance, suppose we're sorting the strings CC, BA, CCAAA, BAACA, and) s
376 92 M
(BAABA.  After we sort them by length, the next three passes sort only the last) s
376 84 M
(three strings by their last three characters, yielding CCAAA BAABA BAACA.  The) s
376 76 M
(fifth pass is on the second character of each string, so we prepend the) s
376 68 M
(two-character strings to our list, yielding CC BA CCAAA BAABA BAACA.  After) s
376 60 M
(sorting on the second and first characters, we end with) s
376 44 M
(  BA BAABA BAACA CC CCAAA.) s
376 28 M
(Observe that BA precedes BAABA and CC precedes CCAAA because of the stability) s
376 20 M
(of the sort.  That's why we put the two-character strings before the five-) s
376 12 M
(character strings when we began the fifth pass.) s
_R
S
%%Trailer
%%Pages: 2
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
