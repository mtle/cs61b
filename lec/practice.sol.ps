%!PS-Adobe-3.0
%%BoundingBox: 25 25 587 767
%%Title: Enscript Output
%%For: Jonathan R. Shewchuk
%%Creator: GNU Enscript 1.6.6
%%CreationDate: Mon May 12 14:31:36 2014
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 6
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 6
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 6
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 742 def
/d_page_h 562 def
/d_header_x 0 def
/d_header_y 526 def
/d_header_w 742 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 742 def
/d_footer_h 0 def
/d_output_w 742 def
/d_output_h 526 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 1 def
/fname (practice.sol) def
/fdir (.) def
/ftail (practice.sol) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (05/12/14) def
/modtimestr (14:31:14) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 516 M
(          CS 61B:  Selected Solutions \(Practice for the Final Exam\)) s
5 492 M
([1]  [a]  insertion sort) s
5 476 M
(          71808294) s
5 468 M
(          17808294) s
5 460 M
(          01788294) s
5 452 M
(          01278894) s
5 444 M
(          01247889) s
5 428 M
(     [b]  selection sort) s
5 412 M
(          71808294) s
5 404 M
(          01878294) s
5 396 M
(          01278894) s
5 388 M
(          01248897) s
5 380 M
(          01247898) s
5 372 M
(          01247889) s
5 356 M
(     [c]  mergesort) s
5 340 M
(          71808294) s
5 332 M
(          17,80,8294) s
5 324 M
(          17,08,8294) s
5 316 M
(          17,08,28,94) s
5 308 M
(          17,08,28,49) s
5 300 M
(          0178,28,49) s
5 292 M
(          0178,2489) s
5 284 M
(          01247889) s
5 268 M
(     [d]  quicksort) s
5 252 M
(          71808294) s
5 244 M
(          21808794) s
5 236 M
(          21088794) s
5 228 M
(          210|4|8798) s
5 220 M
(          0|12|4|8798) s
5 212 M
(          012|4|7898) s
5 204 M
(          012|4|7|8|98) s
5 196 M
(          01247889) s
5 180 M
(     [e]  heapsort) s
5 164 M
(          71808294 \\) s
5 156 M
(          81807294  |) s
5 148 M
(          82807194  | bottomUpHeap\(\)) s
5 140 M
(          82897104  |) s
5 132 M
(          82897140 /) s
5 124 M
(          08897241) s
5 116 M
(          01897842) s
5 108 M
(          01298874) s
5 100 M
(          01249887) s
5 92 M
(          01247898) s
5 84 M
(          01247898) s
5 76 M
(          01247889) s
376 508 M
([2]  Extend each item so that it has a "secondary key," which is the index of) s
376 500 M
(     the item in the initial array/list.  If two items have the same primary) s
376 492 M
(     key, the tie is broken using the secondary key, so no two items are ever) s
376 484 M
(     considered equal.) s
376 468 M
(          5 8 7 5 8 8 3 7     =>     5/0 8/1 7/2 5/3 8/4 8/5 3/6 7/7) s
376 452 M
([3]  [a]  DFS:  abdcegfhi) s
376 444 M
(          BFS:  abcdegifh) s
376 436 M
(     [b]  DFS:  efihgcdba) s
376 428 M
(     [c]  gh, ac, hi, ab, cd, cg, fg, ce    \(cg may come before cd instead\)) s
376 412 M
([4]  [a]  [i]  O\(|V|^2\)    [ii]  O\(|V|\)) s
376 404 M
(     [b]  Visited in preorder.  Finished in postorder.) s
376 396 M
(     [c]  With BFS, it's done exactly the same as with DFS.) s
376 388 M
(          \(See Homework 9 for a description of how it's done with the latter.\)) s
376 380 M
(     [d]  for \(each vertex v in the graph\) {) s
376 372 M
(            if \(v has not been visited\) {) s
376 364 M
(              increment the count of connected components) s
376 356 M
(              perform DFS on v, thereby marking all vertices in its) s
376 348 M
(                                     connected component as having been visited) s
376 340 M
(            }) s
376 332 M
(          }) s
376 316 M
(          This algorithm requires that you don't "unmark" the marked vertices) s
376 308 M
(          between calls to DFS.) s
376 292 M
([5]  [a]          3                   12    ) s
376 284 M
(                 / \\                 /) s
376 276 M
(                1   12              3) s
376 268 M
(               /\\   /              / \\) s
376 260 M
(              0  2 11             1   11    ) s
376 252 M
(                  /              /\\   /      ) s
376 244 M
(          =>     5         =>   0  2 5       ) s
376 236 M
(                / \\                 / \\      ) s
376 228 M
(               4   7               4   7     ) s
376 220 M
(                  / \\                 / \\    ) s
376 212 M
(                 6   9               6   9   ) s
376 204 M
(                    / \\                 / \\  ) s
376 196 M
(                   8   10              8   10) s
376 180 M
(     [b]        4.5) s
376 172 M
(               /   \\) s
376 164 M
(              3     5     ) s
376 156 M
(             / \\     \\    ) s
376 148 M
(            1   4     11  ) s
376 140 M
(           / \\       / \\  ) s
376 132 M
(          0   2     7   12) s
376 124 M
(                   / \\    ) s
376 116 M
(                  6   9   ) s
376 108 M
(                     / \\  ) s
376 100 M
(                    8   10) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 2 def
/fname (practice.sol) def
/fdir (.) def
/ftail (practice.sol) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (05/12/14) def
/modtimestr (14:31:14) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 508 M
(     [c]          3                 3                   10) s
5 500 M
(                 / \\               / \\                 /  \\) s
5 492 M
(                1   5             1   10              3    11) s
5 484 M
(               /\\   /\\           /\\   /\\             / \\     \\) s
5 476 M
(              0  2 4  11        0  2 5  11          1   5     12) s
5 468 M
(                     / \\            / \\  \\         /\\   /\\) s
5 460 M
(          =>       10   12  =>     4   9  12  =>  0  2 4  9) s
5 452 M
(                   /                  /                  /     ) s
5 444 M
(                  9                  7                  7      ) s
5 436 M
(                 /                  / \\                / \\      ) s
5 428 M
(                7                  6   8              6   8    ) s
5 420 M
(               / \\                                   ) s
5 412 M
(              6   8                                  ) s
5 396 M
(     [d]          3                 3                       10) s
5 388 M
(                 / \\               / \\                     /  \\) s
5 380 M
(                1   5             1   5                   5    11) s
5 372 M
(               /\\   /\\           /\\   /\\                 / \\    \\) s
5 364 M
(              0  2 4  11        0  2 4  10              3   7    12) s
5 356 M
(          =>         / \\    =>         / \\      =>     / \\ / \\) s
5 348 M
(                    7   12            7   11          1  4 6  8) s
5 340 M
(                   / \\               / \\   \\         / \\) s
5 332 M
(                  6   10            6   8   12      0   2) s
5 324 M
(                     /) s
5 316 M
(                    8) s
5 300 M
([6]  [a]  If the find operations are done first, then the find operations take) s
5 292 M
(          O\(1\) time each because every item is the root of its own tree.  No) s
5 284 M
(          item has a parent, so finding the set an item is in takes a fixed) s
5 276 M
(          number of operations.) s
5 260 M
(          Union operations always take O\(1\) time.  Hence, a sequence of n) s
5 252 M
(          operations with all the finds before the unions takes O\(n\) time.) s
5 236 M
(     [b]  This question requires amortized analysis.  Find operations can be) s
5 228 M
(          expensive, but an expensive find operation is balanced out by lots) s
5 220 M
(          of cheap union operations.  The accounting is as follows.) s
5 204 M
(          Union operations always take O\(1\) time, so let's say they have an) s
5 196 M
(          actual cost of $1.  Assign each union operation an amortized cost of) s
5 188 M
(          $2, so every union operation puts $1 in the bank.) s
5 172 M
(          Each union operation creates a new child.  \(Some node that was not) s
5 164 M
(          a child of any other node before is a child now.\)  When all the) s
5 156 M
(          union operations are done, there is $1 in the bank for every child,) s
5 148 M
(          or in other words, for every node with a depth of one or greater.) s
5 132 M
(          Let's say that a find\(u\) operation costs $1 if u is a root.  For any) s
5 124 M
(          other node, the find operation costs an additional $1 for each parent) s
5 116 M
(          pointer the find operation traverses.  So the actual cost is) s
5 108 M
(          $\(1 + d\), where d is the depth of u.) s
5 92 M
(          Assign each find operation an amortized cost of $2.  This covers) s
5 84 M
(          the case where u is a root or a child of a root.  For each additional) s
5 76 M
(          parent pointer traversed, $1 is withdrawn from the bank to pay for) s
5 68 M
(          it.) s
5 52 M
(          Fortunately, path compression changes the parent pointers of all the) s
5 44 M
(          nodes we pay $1 to traverse, so these nodes become children of the) s
5 36 M
(          root.  All of the traversed nodes whose depths are 2 or greater move) s
5 28 M
(          up, so their depths are now 1.  We will never have to pay to traverse) s
5 20 M
(          these nodes again.) s
376 508 M
(          Say that a node is a grandchild if its depth is 2 or greater.  Every) s
376 500 M
(          time find\(u\) visits a grandchild, $1 is withdrawn from the bank, but) s
376 492 M
(          the grandchild is no longer a grandchild.  So the maximum number of) s
376 484 M
(          dollars that can ever be withdrawn from the bank is the number of) s
376 476 M
(          grandchildren.  But we initially put $1 in the bank for every child,) s
376 468 M
(          and every grandchild is a child, so the bank balance will never drop) s
376 460 M
(          below zero.  Therefore, the amortization works out.) s
376 444 M
(          Union and find operations both have amortized costs of $2, so any) s
376 436 M
(          sequence of n operations where all the unions are done first takes) s
376 428 M
(          O\(n\) time.) s
376 412 M
([7]  [a]  insert 4, 2, 1, 3, and 6 in that order.) s
376 404 M
(     [b]  insert 4, 5, 6, 1, 3, and 2 in that order.) s
376 388 M
([8]  [a]  If you need inexact matches.  For example, if you want to find the) s
376 380 M
(          item less than or equal to 5 that's closest to 5.  Hash tables can) s
376 372 M
(          only do exact matches.  \(If exact matches are all you need, however,) s
376 364 M
(          hash tables are faster.\)) s
376 356 M
(     [b]  If each single operation absolutely must run in O\(log n\) time.  OR) s
376 348 M
(          If most operations are find\(\)s, and the data access patterns are) s
376 340 M
(          uniformly random.  \(2-3-4 trees are faster for these operations) s
376 332 M
(          because they don't restructure the tree.  But splay trees do better) s
376 324 M
(          if a small proportion of the items are targets of most of the finds.\)) s
376 316 M
(     [c]  If memory use is the primary consideration \(especially if a 2-3-4) s
376 308 M
(          tree holding all the items won't fit in memory\).) s
376 300 M
(     [d]  None.  find\(\) and remove\(\) on a heap take worst-case Theta\(n\) time,) s
376 292 M
(          and they're more complicated than in an unordered array.  insert\(\)) s
376 284 M
(          on a heap takes worst-case Theta\(log n\) time, versus Theta\(1\) for an) s
376 276 M
(          unordered array.) s
376 268 M
(     [e]  When you don't need to find the minimum key.) s
376 252 M
([10]  [a]          A) s
376 244 M
(               A       E) s
376 236 M
(             C   S   R   T) s
376 228 M
(            U D T U T R) s
376 212 M
(      [b]          A) s
376 204 M
(               A       E) s
376 196 M
(             C   S   R   R    \(Note that two nodes are different than in [a].\)) s
376 188 M
(            U D T U T T) s
376 172 M
([12]  DATASTRUCTURE) s
376 164 M
(      DACASTRUTTURE) s
376 156 M
(      DACA|E|TRUTTURS) s
376 148 M
(      DACA|E|RRUTTUTS) s
376 140 M
(      DACA|E|RR|S|TTUTU) s
376 132 M
(      DACA|E|R|R|S|TTUTU) s
376 124 M
(               ^) s
376 108 M
([13]  Radix sort takes b/log2 r passes, so the overall running time of radix) s
376 100 M
(      sort is) s
376 92 M
(                         n + r) s
376 84 M
(           t =  b \(ln 2\) -----) s
376 76 M
(                         ln r) s
376 60 M
(      To find the value of r that minimizes t, set dt/dr to zero.) s
376 44 M
(           dt            ln r - \(n + r\)/r) s
376 36 M
(           -- = b \(ln 2\) ---------------- = 0) s
376 28 M
(           dr                \(ln r\)^2) s
376 12 M
(      Therefore, ln r = \(n + r\)/r.  Given that n = 493, with a calculator and) s
376 4 M
(      some trial-and-error you can determine that r = 128 is the optimal radix.) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 3 def
/fname (practice.sol) def
/fdir (.) def
/ftail (practice.sol) def
% User defined strings:
/pagenumstr (3) def
/moddatestr (05/12/14) def
/modtimestr (14:31:14) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 508 M
([14]  [a]  z:  consider the case where, half-way through the sort, the last key) s
5 500 M
(               in the "sorted" list is changed to a very low number.) s
5 484 M
(                     1 3 5 7 9|8 4 2 6 10) s
5 476 M
(                zap! 1 3 5 7 0|8 4 2 6 10) s
5 460 M
(               Using an in-place insertion sort implementation that searches) s
5 452 M
(               from the end of the sorted array, the remaining keys will never) s
5 444 M
(               get past the zero.) s
5 428 M
(                     1 3 5 7 0 2 4 6 8 10) s
5 412 M
(               Note that if a key in the "unsorted list" is zapped, no harm is) s
5 404 M
(               done at all.) s
5 388 M
(      [b]  y:  If an item in the "sorted list" is zapped, only that one item) s
5 380 M
(               is affected.  If an item in the "unsorted list" is zapped to) s
5 372 M
(               a value lower than the last item in the sorted list, that item) s
5 364 M
(               will be out-of-place, but other items are still sorted.) s
5 348 M
(      [c]  z:  Consider merging two lists, where the first item in one of the) s
5 340 M
(               lists gets zapped to a very high value.  You'll wind up with two) s
5 332 M
(               consecutive sorted portions.  \(After further merge operations,) s
5 324 M
(               there will still be two consecutive sorted portions.\)) s
5 308 M
(                                    /== 100 3 5 7 9 11) s
5 300 M
(                             merge  \\== 2 4 6 8 10 12) s
5 284 M
(      [d]  y:  Radix sort uses no comparisons at all, so the zapped item) s
5 276 M
(               doesn't affect how the others are ordered.) s
_R
S
%%Trailer
%%Pages: 3
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
