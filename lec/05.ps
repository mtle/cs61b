%!PS-Adobe-3.0
%%BoundingBox: 25 25 587 767
%%Title: Enscript Output
%%For: Jonathan R. Shewchuk
%%Creator: GNU enscript 1.6.4
%%CreationDate: Wed Jan 29 02:22:14 2014
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 4
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 4
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 4
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 742 def
/d_page_h 562 def
/d_header_x 0 def
/d_header_y 526 def
/d_header_w 742 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 742 def
/d_footer_h 0 def
/d_output_w 742 def
/d_output_h 526 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 1 def
/fname (05) def
/fdir () def
/ftail (05) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (01/29/14) def
/modtimestr (02:20:41) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 516 M
(                              CS 61B:  Lecture 5) s
5 508 M
(                         Wednesday, January 29, 2014) s
5 492 M
(Today's reading:  Sierra & Bates pp. 59-62, 83, 114-116, 293-300, 670.) s
5 476 M
(LOOPS) s
5 468 M
(=====) s
5 452 M
("while" Loops) s
5 444 M
(-------------) s
5 436 M
(A "while" statement is like an "if" statement, but the body of the statement is) s
5 428 M
(executed repeatedly, as long as the condition remains true.  The following) s
5 420 M
(example tests whether n is a prime number by attempting to divide it by every) s
5 412 M
(integer in the range 2...n - 1.) s
5 396 M
(    public static boolean isPrime\(int n\) {) s
5 388 M
(      int divisor = 2;) s
5 380 M
(      while \(divisor < n\) {         _ <- "divisor < n" is the _loop_condition_.) s
5 372 M
(        if \(n % divisor == 0\) {      |) s
5 364 M
(          return false;              | These lines inside the braces) s
5 356 M
(        }                            | are called the _loop_body_.  ) s
5 348 M
(        divisor++;                  _|) s
5 340 M
(      }) s
5 332 M
(      return true;) s
5 324 M
(    }) s
5 308 M
(Here's how the loop executes.) s
5 300 M
(- When Java reaches this "while" loop, it tests whether the loop condition) s
5 292 M
(  "divisor < n" is true.) s
5 284 M
(- If divisor < n, Java executes the loop body {in braces}.) s
5 276 M
(- When Java finishes the loop body \(i.e. after executing "divisor++"\), it) s
5 268 M
(  tests _again_ whether "divisor < n" is true.) s
5 260 M
(- If it's still true, Java jumps back up to the beginning of the loop body and) s
5 252 M
(  executes it again.) s
5 244 M
(- If Java tests the loop condition and finds that "divisor < n" is false, Java) s
5 236 M
(  continues execution from the next line of code _after_ the loop body.) s
5 220 M
(An _iteration_ is a pass through the loop body.  In this example, if n is 2 or) s
5 212 M
(less, the loop body won't iterate even once.) s
5 196 M
("for" Loops) s
5 188 M
(-----------) s
5 180 M
("for" loops are a convenient shorthand that can be used to write some "while") s
5 172 M
(loops in a more compact way.  The following "for" loop is equivalent to the) s
5 164 M
(following "while" loop.) s
5 148 M
(    for \(initialize; condition; next\) {      |    initialize;   ) s
5 140 M
(      statements;                            |    while \(condition\) {) s
5 132 M
(    }                                        |      statements;) s
5 124 M
(                                             |      next;) s
5 116 M
(                                             |    }) s
5 100 M
(By convention, the "initialize" and "next" are both expressions that affect a) s
5 92 M
(variable that changes every loop iteration and is central to the test.  Most) s
5 84 M
(commonly, "for" statements are used to iterate while advancing an index) s
5 76 M
(variable over a fixed range of values.  isPrime can be rewritten thus:) s
5 60 M
(    public static boolean isPrime\(int n\) {) s
5 52 M
(      for \(int divisor = 2; divisor < n; divisor++\) {    _) s
5 44 M
(        if \(n % divisor == 0\) {                           |) s
5 36 M
(          return false;                                   | Loop body.) s
5 28 M
(        }                                                _|) s
5 20 M
(      }) s
5 12 M
(      return true;) s
5 4 M
(    }) s
376 508 M
(A common mistake among beginning Java and C programmers is to get the condition) s
376 500 M
(wrong and do one loop iteration too few.  For example, suppose you want to) s
376 492 M
(print all the prime numbers in the range 2...n.) s
376 476 M
(    public static void printPrimes\(int n\) {) s
376 468 M
(      int i;) s
376 460 M
(      for \(i = 2; i < n; i++\) {        // ERROR!!!  Condition should be i <= n.) s
376 452 M
(        if \(isPrime\(i\)\) {) s
376 444 M
(          System.out.print\(" " + i\);) s
376 436 M
(        }) s
376 428 M
(      }) s
376 420 M
(    }) s
376 404 M
(Suppose we correct this method so the loop condition is "i <= n".  Think) s
376 396 M
(carefully:  what is the value of i when the printPrimes method ends?) s
376 380 M
(We'll come back to iteration, but first let's investigate something more) s
376 372 M
(interesting to iterate on.) s
376 356 M
(ARRAYS) s
376 348 M
(======) s
376 340 M
(An array is an object consisting of a numbered list of variables, each of which) s
376 332 M
(is a primitive type or a reference to another object.  The variables in an) s
376 324 M
(array are always indexed from zero in increments of one.  For example, here is) s
376 316 M
(an array of characters.) s
376 308 M
(                                      0   1   2   3) s
376 300 M
(                           ---      -----------------) s
376 292 M
(                           |.+----->| b | l | u | e |) s
376 284 M
(                           ---      -----------------) s
376 276 M
(                            c) s
376 260 M
(Like any object, an array is only useful if we can reference it, usually) s
376 252 M
(through some reference variable like "c" above.  We declare c thusly:) s
376 236 M
(    char[] c;           // Reference to an array \(of any length\) of characters.) s
376 220 M
(We can construct an array of four characters as follows.) s
376 204 M
(    c = new char[4];) s
376 188 M
(Now that we have an array object, we may fill in its values by indexing c.) s
376 172 M
(    c[0] = 'b';         // Store the character 'b' at index 0.) s
376 164 M
(    c[1] = 'l';) s
376 156 M
(    c[2] = 'u';) s
376 148 M
(    c[3] = 'e';) s
376 132 M
(The characters in a four-element array are indexed from 0 to 3.  If we try to) s
376 124 M
(address any index outside this range, we will trigger a run-time error.) s
376 108 M
(    c[4] = 's';         // Program stops with ArrayIndexOutOfBoundsException) s
376 92 M
(A _run-time_error_ is an error that doesn't show up when you compile the code,) s
376 84 M
(but does show up later when you run the program and the Java Virtual Machine) s
376 76 M
(tries to access the out-of-range index.) s
376 60 M
(When c references an array, you can find out its length by looking at the field) s
376 52 M
("c.length".  You can never assign a value to the "length" field, though.  Java) s
376 44 M
(will give you a compile-time error if you try.) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 2 def
/fname (05) def
/fdir () def
/ftail (05) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (01/29/14) def
/modtimestr (02:20:41) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 508 M
(Primes Revisited) s
5 500 M
(----------------) s
5 492 M
(The printPrimes method is embarrassingly slow when n is large.  Arrays can help) s
5 484 M
(us write a faster method to identify the primes from 2 to n.) s
5 468 M
(The method uses an ancient algorithm called the Sieve of Eratosthenes.  All) s
5 460 M
(integers are assumed prime until proven composite.  The algorithm iterates) s
5 452 M
(through all possible divisors, and marks as non-prime every integer divisible) s
5 444 M
(by a given divisor.  Here's the beginning of the method.) s
5 428 M
(    public static void printPrimes\(int n\) {) s
5 420 M
(      boolean[] prime = new boolean[n + 1];                  // Numbered 0...n.) s
5 412 M
(      int i;) s
5 404 M
(      for \(i = 2; i <= n; i++\) {) s
5 396 M
(        prime[i] = true;                       // Prime until proven composite.) s
5 388 M
(      }) s
5 372 M
(Why did we construct an array of length n + 1?  Because if we'd constructed an) s
5 364 M
(array of length n, its elements would be numbered from 0 to n - 1.  But we'd) s
5 356 M
(like to have an element numbered n.) s
5 340 M
(To continue the method, we iterate over all possible divisors from 2 to the) s
5 332 M
(square root of n.  For each prime value of divisor, we mark as non-prime all) s
5 324 M
(integers divisible by divisor, except divisor itself.) s
5 308 M
(      for \(int divisor = 2; divisor * divisor <= n; divisor++\) {) s
5 300 M
(        if \(prime[divisor]\) {) s
5 292 M
(          for \(i = 2 * divisor; i <= n; i = i + divisor\) {) s
5 284 M
(            prime[i] = false;                     // i is divisible by divisor.) s
5 276 M
(          }) s
5 268 M
(        }) s
5 260 M
(      }) s
5 244 M
(Math question:  why do we only need to consider divisors up to the square root) s
5 236 M
(of n?) s
5 220 M
(Finally, we print every integer from 2 to n that hasn't been marked non-prime.) s
5 204 M
(      for \(i = 2; i <= n; i++\) {) s
5 196 M
(        if \(prime[i]\) {) s
5 188 M
(          System.out.print\(" " + i\);) s
5 180 M
(        }) s
5 172 M
(      }) s
5 164 M
(    }) s
5 148 M
(Observe that elements 0 and 1 of the array are never used.  A tiny bit of) s
5 140 M
(memory is wasted, but the readability of the code is better for it.) s
376 508 M
(Multi-Dimensional Arrays) s
376 500 M
(------------------------) s
376 492 M
(A _two-dimensional_array_ is an array of references to arrays.  A three-) s
376 484 M
(dimensional array is an array of arrays of arrays.  As an example, consider) s
376 476 M
(Pascal's Triangle.) s
376 460 M
(                                       1                  <-- row 0) s
376 452 M
(                                    1     1) s
376 444 M
(                                 1     2     1) s
376 436 M
(                              1     3     3     1) s
376 428 M
(                           1     4     6     4     1) s
376 420 M
(                        1     5    10     10    5     1   <-- row 5) s
376 404 M
(Each entry is the sum of the two nearest entries in the row immediately above.) s
376 396 M
(If the rows are numbered from zero, row i represents the coefficients of the) s
376 388 M
(polynomial \(x + 1\)^i.  For example, \(x + 1\)^4 = x^4 + 4x^3 + 6x^2 + 4x + 1.) s
376 372 M
(The following method returns an array of arrays of ints that stores the first n) s
376 364 M
(rows of Pascal's Triangle.) s
376 348 M
(     public static int[][] pascalTriangle\(int n\) {) s
376 340 M
(       int[][] pt = new int[n][];) s
376 324 M
(Here, we've just declared pt to reference an array of arrays, and constructed) s
376 316 M
(an array for it to reference.  However, the arrays that this array will) s
376 308 M
(reference do not yet exist.  They are constructed and filled in by the) s
376 300 M
(following loop.) s
376 284 M
(       for \(int i = 0; i < n; i++\) {) s
376 276 M
(         pt[i] = new int[i + 1];                            // Construct row i.) s
376 268 M
(         pt[i][0] = 1;                              // Leftmost value of row i.) s
376 260 M
(         for \(int j = 1; j < i; j++\) {) s
376 252 M
(           pt[i][j] = pt[i - 1][j - 1] + pt[i - 1][j];  // Sum 2 entries above.) s
376 244 M
(         }) s
376 236 M
(         pt[i][i] = 1;                             // Rightmost value of row i.) s
376 228 M
(       }) s
376 220 M
(       return pt;) s
376 212 M
(     }) s
376 196 M
(Our array objects look like this:) s
376 180 M
(                                                 -----) s
376 172 M
(                 ------------------------------->| 1 |) s
376 164 M
(                 |                               -----------) s
376 156 M
(                 |     ------------------------->| 1  |  1 |) s
376 148 M
(                 |     |                         -----------------) s
376 140 M
(                 |     |     ------------------->| 1  |  2  |  1 |) s
376 132 M
(                 |     |     |                   -----------------------) s
376 124 M
(                 |     |     |     ------------->| 1  |  3  |  3  |  1 |) s
376 116 M
(     ---      ---+-----+-----+-----+--------     -----------------------------) s
376 108 M
(  pt |.+----->|  .  |  .  |  .  |  .  |  .-+---->| 1  |  4  |  6  |  4  |  1 |) s
376 100 M
(     ---      ------------------------------     -----------------------------) s
_R
S
%%Trailer
%%Pages: 2
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
