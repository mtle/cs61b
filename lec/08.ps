%!PS-Adobe-3.0
%%BoundingBox: 25 25 587 767
%%Title: Enscript Output
%%For: Jonathan R. Shewchuk
%%Creator: GNU enscript 1.6.4
%%CreationDate: Wed Jan 29 23:49:23 2014
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 4
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 4
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 4
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 742 def
/d_page_h 562 def
/d_header_x 0 def
/d_header_y 526 def
/d_header_w 742 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 742 def
/d_footer_h 0 def
/d_output_w 742 def
/d_output_h 526 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 1 def
/fname (08) def
/fdir () def
/ftail (08) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (01/29/14) def
/modtimestr (23:49:03) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 516 M
(                              CS 61B: Lecture 8) s
5 508 M
(                         Wednesday, February 5, 2014) s
5 492 M
(Today's reading:  Goodrich & Tamassia, Section 3.3.) s
5 476 M
(THE "public" AND "private" KEYWORDS) s
5 468 M
(===================================) s
5 460 M
(Thus far, we've usually declared fields and methods using the "public" keyword.) s
5 452 M
(However, we can also declare a field or method "private".  A private method) s
5 444 M
(or field is invisible and inaccessible to other classes, and can be used only) s
5 436 M
(within the class in which the field or method is declared.) s
5 420 M
(Why would we want to make a field or method private?) s
5 412 M
(\(1\)   To prevent data within an object from being corrupted by other classes.) s
5 404 M
(\(2\)   To ensure that you can improve the implementation of a class without) s
5 396 M
(      causing other classes that depend on it to fail.) s
5 380 M
(In the following example, EvilTamperer tries to get around the error checking) s
5 372 M
(code of the Date class by fiddling with the internals of a Date object.) s
5 356 M
(  public class Date {                  |  public class EvilTamperer {) s
5 348 M
(    private int day;                   |    public void tamper\(\) {) s
5 340 M
(    private int month;                 |      Date d = new Date\(1, 1, 2006\);) s
5 332 M
(                                       |) s
5 324 M
(    private void setMonth\(int m\) {     |      d.day = 100;    // Foiled!!) s
5 316 M
(      month = m;                       |      d.setMonth\(0\);  // Foiled again!!) s
5 308 M
(    }                                  |    }) s
5 300 M
(                                       |  }) s
5 292 M
(    public Date\(int month, int day\) {  |) s
5 284 M
(      [Implementation with             |) s
5 276 M
(       error-checking code here.]      |) s
5 268 M
(    }) s
5 260 M
(  }) s
5 244 M
(However, javac won't compile EvilTamperer, because the Date class has declared) s
5 236 M
(its vulnerable parts "private".  setMonth is an internal helper method used) s
5 228 M
(within the Date class, whereas the Date constructor is a public part of the) s
5 220 M
(interface of the Date class.  Error-checking code in the constructor ensures) s
5 212 M
(that invalid Dates are not constructed.) s
5 196 M
(Here are some important definitions.) s
5 180 M
(The _interface_ of a class is a set of prototypes for public methods \(and) s
5 172 M
(sometimes public fields\), plus descriptions of the methods' behaviors.) s
5 156 M
(An _Abstract_Data_Type_ \(ADT\) is a class that has a well-defined interface, but) s
5 148 M
(its implementation details are firmly hidden from other classes.  That way, you) s
5 140 M
(can change the implementation of a class without jeopardizing the programs that) s
5 132 M
(depend on it.  The Date class is an ADT.  We'll implement lots of ADTs this) s
5 124 M
(semester.) s
5 108 M
(An _invariant_ is a fact about a data structure that is always true \(assuming) s
5 100 M
(the code is bug-free\), no matter what methods are called by external classes.) s
5 92 M
(For example, the Date ADT enforces the invariant that a Date object always) s
5 84 M
(represents a valid date.  An invariant is enforced by allowing access to) s
5 76 M
(certain fields only through method calls.) s
5 60 M
(An ADT is often a good thing to aspire to.  In most of your classes, you should) s
5 52 M
(declare all fields private, as well as helper functions meant only for internal) s
5 44 M
(use, so that you can maintain sensible invariants on your data structures.) s
5 28 M
(However, not all classes are ADTs!  Some classes are nothing more than data) s
5 20 M
(storage units, and do not need to enforce any invariants.  In such classes, all) s
5 12 M
(fields may be declared public.) s
376 516 M
(The SList ADT) s
376 508 M
(-------------) s
376 500 M
(Last lecture, I created an SList class to solve the problems of representing) s
376 492 M
(empty lists and inserting items at the beginning of a list.  Today, I want to) s
376 484 M
(introduce another advantage of the SList class.) s
376 468 M
(We want the SList ADT to enforce two invariants:) s
376 460 M
(\(1\)  An SList's "size" variable is always correct.) s
376 452 M
(\(2\)  A list is never circularly linked; there is always a tail node whose) s
376 444 M
(     "next" reference is null.) s
376 428 M
(Both these goals are accomplished by making sure that _only_ the methods of the) s
376 420 M
(SList class can change the lists' internal data structures.  SList ensures this) s
376 412 M
(by two means:) s
376 404 M
(\(1\)  The fields of the SList class \(head and size\) are declared "private".) s
376 396 M
(\(2\)  No method of SList returns an SListNode.) s
376 380 M
(The first rule is necessary so that the evil tamperer can't change the fields) s
376 372 M
(and corrupt the SList or violate invariant \(1\).  The second rule prevents the) s
376 364 M
(evil tamperer from changing list items, truncating a list, or creating a cycle) s
376 356 M
(in a list, thereby violating invariant \(2\).) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 2 def
/fname (08) def
/fdir () def
/ftail (08) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (01/29/14) def
/modtimestr (23:49:03) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 508 M
(DOUBLY-LINKED LISTS) s
5 500 M
(===================) s
5 492 M
(As we saw last class, inserting an item at the front of a linked list is easy.) s
5 484 M
(Deleting from the front of a list is also easy.  However, inserting or deleting) s
5 476 M
(an item at the end of a list entails a search through the entire list, which) s
5 468 M
(might take a long time.  \(Inserting at the end is easy if you have a `tail') s
5 460 M
(pointer, as you will learn in Lab 3, but deleting is still hard.\)) s
5 444 M
(A doubly-linked list is a list in which each node has a reference to the) s
5 436 M
(previous node, as well as the next node.) s
5 420 M
(  class DListNode {                    |  class DList {) s
5 412 M
(    Object item;                       |    private DListNode head;) s
5 404 M
(    DListNode next;                    |    private DListNode tail;) s
5 396 M
(    DListNode prev;                    |  }) s
5 388 M
(  }                                    |) s
5 372 M
(           -------------      -------------      -------------) s
5 364 M
(           |       item|      |       item|      |       item|) s
5 356 M
(    head   |      -----|      |      -----|      |      -----|   tail) s
5 348 M
(    -----  |----- | 4 ||      |----- | 1 ||      |----- | 8 ||  -----) s
5 340 M
(    | . +->|| X | -----|<-----++-. | -----|<-----++-. | -----|<-+-. |) s
5 332 M
(    -----  |----- -----|      |----- -----|      |----- -----|  -----) s
5 324 M
(           |prev  | .-++----->|prev  | .-++----->|prev  | X ||) s
5 316 M
(           |      -----|      |      -----|      |      -----|) s
5 308 M
(           |       next|      |       next|      |       next|) s
5 300 M
(           -------------      -------------      -------------) s
5 284 M
(DLists make it possible to insert and delete items at both ends of the list,) s
5 276 M
(taking constant running time per insertion and deletion.  The following code) s
5 268 M
(removes the tail node \(in constant time\) if there are at least two items in the) s
5 260 M
(DList.) s
5 244 M
(  tail.prev.next = null;) s
5 236 M
(  tail = tail.prev;) s
5 220 M
(You'll need a special case for a DList with no items.  You'll also need a) s
5 212 M
(special case for a DList with one item, because tail.prev.next does not exist.) s
5 204 M
(\(Instead, head needs to be changed.\)) s
5 188 M
(Let's look at a clever trick for reducing the number of special cases, thereby) s
5 180 M
(simplifying our DList code.  We designate one DListNode as a _sentinel_, a) s
5 172 M
(special node that does not represent an item.  Our list representation will be) s
5 164 M
(circularly linked, and the sentinel will represent both the head and the tail) s
5 156 M
(of the list.  Our DList class no longer needs a tail pointer, and the head) s
5 148 M
(pointer points to the sentinel.) s
376 508 M
(  class DList {) s
376 500 M
(    private DListNode head;) s
376 492 M
(    private int size;) s
376 484 M
(  }) s
376 468 M
(                          sentinel) s
376 460 M
(                          -------------    -----) s
376 452 M
(                          |       item|<---+-. |) s
376 444 M
(          --------------->|      -----|    -----) s
376 436 M
(          |               |prev  | X ||     head) s
376 428 M
(          |               |----- -----|) s
376 420 M
(          |               || .-+------+-----------------) s
376 412 M
(          |               |----- -----|                |) s
376 404 M
(          |      ---------+------+-. ||                |) s
376 396 M
(          |      |        |  next-----|<---------------+-----) s
376 388 M
(          |      |        -------------                |    |) s
376 380 M
(          |      v                                     v    |) s
376 372 M
(       ---+---------      -------------      -------------  |) s
376 364 M
(       |  |    item|      |       item|      |       item|  |) s
376 356 M
(       |  |   -----|      |      -----|      |      -----|  |) s
376 348 M
(       |--+-- | 4 ||      |----- | 1 ||      |----- | 8 ||  |) s
376 340 M
(       || . | -----|<-----++-. | -----|<-----++-. | -----|  |) s
376 332 M
(       |----- -----|      |----- -----|      |----- -----|  |) s
376 324 M
(       |prev  | .-++----->|prev  | .-++----->|prev  | .-++---) s
376 316 M
(       |      -----|      |      -----|      |      -----|) s
376 308 M
(       |       next|      |       next|      |       next|) s
376 300 M
(       -------------      -------------      -------------) s
376 284 M
(The invariants of the DList ADT are more complicated than the SList invariants.) s
376 276 M
(The following invariants apply to the DList with a sentinel.) s
376 268 M
(\(1\)  For any DList d, d.head != null.  \(There's always a sentinel.\)) s
376 260 M
(\(2\)  For any DListNode x, x.next != null.) s
376 252 M
(\(3\)  For any DListNode x, x.prev != null.) s
376 244 M
(\(4\)  For any DListNode x, if x.next == y, then y.prev == x.) s
376 236 M
(\(5\)  For any DListNode x, if x.prev == y, then y.next == x.) s
376 228 M
(\(6\)  A DList's "size" variable is the number of DListNodes, NOT COUNTING the) s
376 220 M
(     sentinel \(denoted by "head"\), that can be accessed from the sentinel by) s
376 212 M
(     a sequence of "next" references.) s
376 196 M
(An empty DList is represented by having the sentinel's prev and next fields) s
376 188 M
(point to itself.) s
376 172 M
(Here's an example of a method that removes the last item from a DList.) s
376 156 M
(  public void removeBack\(\) {) s
376 148 M
(    if \(head.prev != head\) {        // Do nothing if the DList is empty.) s
376 140 M
(      head.prev = head.prev.prev;   // Sentinel now points to second-last item.) s
376 132 M
(      head.prev.next = head;        // Second-last item now points to sentinel.) s
376 124 M
(      size--;) s
376 116 M
(    }) s
376 108 M
(  }) s
376 92 M
(In Lab 4 and Homework 4, you'll implement more methods for this DList class.) s
_R
S
%%Trailer
%%Pages: 2
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
