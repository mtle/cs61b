%!PS-Adobe-3.0
%%BoundingBox: 25 25 587 767
%%Title: Enscript Output
%%For: Jonathan R. Shewchuk
%%Creator: GNU Enscript 1.6.6
%%CreationDate: Wed Apr  2 04:45:31 2014
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 6
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 6
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 6
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 742 def
/d_page_h 562 def
/d_header_x 0 def
/d_header_y 526 def
/d_header_w 742 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 742 def
/d_footer_h 0 def
/d_output_w 742 def
/d_output_h 526 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 1 def
/fname (28) def
/fdir (.) def
/ftail (28) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (04/02/14) def
/modtimestr (04:40:48) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 516 M
(                              CS 61B:  Lecture 28) s
5 508 M
(                           Wednesday, April 2, 2014) s
5 492 M
(GRAPHS) s
5 484 M
(======) s
5 476 M
(A graph G is a set V of vertices \(sometimes called nodes\), and a set E of edges) s
5 468 M
(\(sometimes called arcs\) that each connect two vertices together.  To confuse) s
5 460 M
(you, mathematicians often use the notation G = \(V, E\).  Here, "\(V, E\)" is an) s
5 452 M
(_ordered_pair_ of sets.  This isn't as deep and meaningful as it sounds;) s
5 444 M
(some people just love formalism.  The notation is convenient when you want to) s
5 436 M
(discuss several graphs with the same vertices; e.g. G = \(V, E\) and T = \(V, F\).) s
5 420 M
(Graphs come in two types:  _directed_ and _undirected_.  In a directed graph) s
5 412 M
(\(or _digraph_ for short\), every edge e is directed from some vertex v to some) s
5 404 M
(vertex w.  We write "e = \(v, w\)" \(also an ordered pair\), and draw an arrow) s
5 396 M
(pointing from v to w.  The vertex v is called the _origin_ of e, and w is the) s
5 388 M
(_destination_ of e.) s
5 372 M
(In an undirected graph, edges have no favored direction, so we draw a curve) s
5 364 M
(connecting v and w.  We still write e = \(v, w\), but now it's an unordered pair,) s
5 356 M
(which means that \(v, w\) = \(w, v\).) s
5 340 M
(One application of a graph is to model a street map.  For each intersection,) s
5 332 M
(define a vertex that represents it.  If two intersections are connected by a) s
5 324 M
(length of street with no intervening intersection, define an edge connecting) s
5 316 M
(them.  We might use an undirected graph, but if there are one-way streets, a) s
5 308 M
(directed graph is more appropriate.  We can model a two-way street with two) s
5 300 M
(edges, one pointing in each direction.  On the other hand, if we want a graph) s
5 292 M
(that tells us which cities adjoin each other, an undirected graph makes sense.) s
5 276 M
(     ---   Bancroft  ---             ---             --------      ------------) s
5 268 M
(     |1|<------------|2|<------------|3|             |Albany|------|Kensington|) s
5 260 M
(     ---             ---             ---             --------      ------------) s
5 252 M
(      |               ^              | ^                     \\       /) s
5 244 M
( Dana |     Telegraph |     Bowditch | |     ------------     ----------) s
5 236 M
(      v               |              v |     |Emeryville|-----|Berkeley|) s
5 228 M
(     ---             ---             ---     ------------     ----------) s
5 220 M
(     |4|------------>|5|------------>|6|              \\      /) s
5 212 M
(     ---    Durant   ---             ---            ---------     ----------) s
5 204 M
(                                                    |Oakland|-----|Piedmont|) s
5 196 M
(Multiple copies of an edge are forbidden,           ---------     ----------) s
5 188 M
(but a directed graph may contain both \(v, w\)) s
5 180 M
(and \(w, v\).  Both types of graph can have _self-edges_ of the form \(v, v\),) s
5 172 M
(which connect a vertex to itself.  \(Many applications, like the two illustrated) s
5 164 M
(above, don't use these.\)) s
5 148 M
(A _path_ is a sequence of vertices such that each adjacent pair of vertices is) s
5 140 M
(connected by an edge.  If the graph is directed, the edges that form the path) s
5 132 M
(must all be aligned with the direction of the path.  The _length_ of a path is) s
5 124 M
(the number of edges it traverses.  Above, <4, 5, 6, 3> is a path of length 3.) s
5 116 M
(It is perfectly respectable to talk about a path of length zero, such as <2>.) s
5 108 M
(The _distance_ from one vertex to another is the length of the shortest path) s
5 100 M
(from one to the other.) s
5 84 M
(A graph is _strongly_connected_ if there is a path from every vertex to every) s
5 76 M
(other vertex.  \(This is just called _connected_ in undirected graphs.\)  Both) s
5 68 M
(graphs above are strongly connected.) s
5 52 M
(The _degree_ of a vertex is the number of edges incident on that vertex.) s
5 44 M
(\(Self-edges count just once in 61B.\)  Hence, Berkeley has degree 4, and) s
5 36 M
(Piedmont has degree 1.  A vertex in a directed graph has an _indegree_ \(the) s
5 28 M
(number of edges directed toward it\) and an _outdegree_ \(the number of edges) s
5 20 M
(directed away\).  Intersection 6 above has indegree 2 and outdegree 1.) s
376 508 M
(Graph Representations) s
376 500 M
(---------------------) s
376 492 M
(There are two popular ways to represent a graph.  The first is an _adjacency_) s
376 484 M
(_matrix_, a |V|-by-|V| array of boolean values \(where |V| is the number of) s
376 476 M
(vertices in the graph\).  Each row and column represents a vertex of the graph.) s
376 468 M
(Set the value at row i, column j to true if \(i, j\) is an edge of the graph.  If) s
376 460 M
(the graph is undirected \(below right\), the adjacency matrix is _symmetric_:) s
376 452 M
(row i, column j has the same value as row j, column i.) s
376 436 M
(          1 2 3 4 5 6                           Alb Ken Eme Ber Oak Pie) s
376 428 M
(        1 - - - T - -                    Albany  -   T   -   T   -   -) s
376 420 M
(        2 T - - - - -                Kensington  T   -   -   T   -   -) s
376 412 M
(        3 - T - - - T                Emeryville  -   -   -   T   T   -) s
376 404 M
(        4 - - - - T -                  Berkeley  T   T   T   -   T   -) s
376 396 M
(        5 - T - - - T                   Oakland  -   -   T   T   -   T) s
376 388 M
(        6 - - T - - -                  Piedmont  -   -   -   -   T   -) s
376 372 M
(It should be clear that the maximum possible number of edges is |V|^2 for a) s
376 364 M
(directed graph, and slightly more than half that for an undirected graph.  In) s
376 356 M
(many applications, however, the number of edges is much less than Theta\(|V|^2\).) s
376 348 M
(For instance, our maps above are _planar_graphs_ \(graphs that can be drawn) s
376 340 M
(without edges crossing\), and all planar graphs have O\(|V|\) edges.  A graph is) s
376 332 M
(called _sparse_ if it has far fewer edges than the maximum possible number.) s
376 324 M
(\("Sparse" has no precise definition, but it usually implies that the number of) s
376 316 M
(edges is asymptotically smaller than |V|^2.\)) s
376 300 M
(For a sparse graph, an adjacency matrix representation is very wasteful.) s
376 292 M
(A more memory-efficient data structure for sparse graphs is the _adjacency_) s
376 284 M
(_list_.  An adjacency list is actually a collection of lists.  Each vertex v) s
376 276 M
(maintains a list of the edges directed out from v.  The standard list) s
376 268 M
(representations all work--arrays \(below left\), linked lists \(below right\), even) s
376 260 M
(search trees \(because you can traverse one in linear time\).) s
376 244 M
(      ---   -----                       ---   ------   ------) s
376 236 M
(    1 |.+-> | 4 |                Albany |.+-> |Ken.+-> |Ber*|) s
376 228 M
(      ---   =====                       ===   ======   ======) s
376 220 M
(    2 |.+-> | 1 |            Kensington |.+-> |Alb.+-> |Ber*|) s
376 212 M
(      ---   =====----                   ===   ======   ======) s
376 204 M
(    3 |.+-> | 2 | 6 |        Emeryville |.+-> |Ber.+-> |Oak*|) s
376 196 M
(      ---   =====----                   ===   ======   ======   ------   ------) s
376 188 M
(    4 |.+-> | 5 |              Berkeley |.+-> |Alb.+-> |Ken.+-> |Eme.+-> |Oak*|) s
376 180 M
(      ---   =====----                   ===   ======   ======   ======   ------) s
376 172 M
(    5 |.+-> | 2 | 6 |           Oakland |.+-> |Eme.+-> |Ber.+-> |Pie*|) s
376 164 M
(      ---   =====----                   ===   ======   ------   ------) s
376 156 M
(    6 |.+-> | 3 |              Piedmont |.+-> |Oak*|) s
376 148 M
(      ---   -----                       ---   ------) s
376 132 M
(The total memory used by all the lists is Theta\(|V| + |E|\).) s
376 116 M
(If your vertices have consecutive integer names, you can declare an array of) s
376 108 M
(lists, and find any vertex's list in O\(1\) time.  If your vertices have names) s
376 100 M
(like "Albany," you can use a hash table to map names to lists.  Each entry in) s
376 92 M
(the hash table uses a vertex name as a key, and a List object as the associated) s
376 84 M
(value.  You can find the list for any label in O\(1\) average time.) s
376 68 M
(An adjacency list is more space- and time-efficient than an adjacency matrix) s
376 60 M
(for a sparse graph, but less efficient for a _complete_graph_.  A complete) s
376 52 M
(graph is a graph having every possible edge; that is, for every vertex u and) s
376 44 M
(every vertex v, \(u, v\) is an edge of the graph.) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 2 def
/fname (28) def
/fdir (.) def
/ftail (28) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (04/02/14) def
/modtimestr (04:40:48) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 508 M
(Graph Traversals) s
5 500 M
(----------------) s
5 492 M
(We'll look at two types of graph traversals, which can be used on either) s
5 484 M
(directed or undirected graphs to visit each vertex once.  Depth-first search) s
5 476 M
(\(DFS\) starts at an arbitrary vertex and searches a graph as "deeply" as) s
5 468 M
(possible as early as possible.  For example, if your graph is an undirected) s
5 460 M
(tree, DFS performs a preorder \(or if you prefer, postorder\) tree traversal.) s
5 444 M
(Breadth-first search \(BFS\) starts by visiting an arbitrary vertex, then visits) s
5 436 M
(all vertices whose distance from the starting vertex is one, then all vertices) s
5 428 M
(whose distance from the starting vertex is two, and so on.  If your graph is an) s
5 420 M
(undirected tree, BFS performs a level-order tree traversal.) s
5 404 M
(In a graph, unlike a tree, there may be several ways to get from one vertex to) s
5 396 M
(another.  Therefore, each vertex has a boolean field called "visited" that) s
5 388 M
(tells us if we have visited the vertex before, so we don't visit it twice.) s
5 380 M
(When we say we are "marking a vertex visited", we are setting its "visited") s
5 372 M
(field to true.) s
5 356 M
(Assume that we are traversing a strongly connected graph, thus there is a path) s
5 348 M
(from the starting vertex to every other vertex.) s
5 332 M
(When DFS visits a vertex u, it checks every vertex v that can be reached by) s
5 324 M
(some edge \(u, v\).  If v has not yet been visited, DFS visits it recursively.) s
5 308 M
(public class Graph {) s
5 300 M
(  // Before calling dfs\(\), set every "visited" flag to false; takes O\(|V|\) time) s
5 292 M
(  public void dfs\(Vertex u\) {) s
5 284 M
(    u.visit\(\);                                // Do some unspecified thing to u) s
5 276 M
(    u.visited = true;                              // Mark the vertex u visited) s
5 268 M
(    for \(each vertex v such that \(u, v\) is an edge in E\) {) s
5 260 M
(      if \(!v.visited\) {) s
5 252 M
(        dfs\(v\);) s
5 244 M
(      }) s
5 236 M
(    }) s
5 228 M
(  }) s
5 220 M
(}) s
5 204 M
(In this DFS pseudocode, a "visit\(\)" method is defined that performs some action) s
5 196 M
(on a specified vertex.  For instance, if we want to count the total population) s
5 188 M
(of the city graph above, "visit\(\)" might add the population of the visited city) s
5 180 M
(to the grand total.  The order in which cities are visited depends partly on) s
5 172 M
(their order in the adjacency lists.) s
5 156 M
(The sequence of figures below shows the behavior of DFS on our street map,) s
5 148 M
(starting at vertex 1.  A "V" is currently visited; an "x" is marked visited;) s
5 140 M
(a "*" is a vertex which we try to visit but discover has already been visited.) s
5 124 M
(V<-2<-3  x<-2<-3  x<-2<-3  x<-V<-3  *<-V<-3  x<-x<-3  x<-x<-V  x<-*<-V  x<-x<-V) s
5 116 M
(|  ^  ^  |  ^  ^  |  ^  ^  |  ^  ^  |  ^  ^  |  ^  ^  |  ^  ^  |  ^  ^  |  ^  ^) s
5 108 M
(v  |  v  v  |  v  v  |  v  v  |  v  v  |  v  v  |  v  v  |  v  v  |  v  v  |  v) s
5 100 M
(4->5->6  V->5->6  x->V->6  x->x->6  x->x->6  x->x->V  x->x->x  x->x->x  x->x->*) s
5 84 M
(DFS runs in O\(|V| + |E|\) time if you use an adjacency list; O\(|V|^2\) time if) s
5 76 M
(you use an adjacency matrix.  Hence, an adjacency list is asymptotically faster) s
5 68 M
(if the graph is sparse.) s
5 52 M
(What's an application of DFS?  Suppose you want to determine whether there is) s
5 44 M
(a path from a vertex u to another vertex v.  Just do DFS from u, and see if v) s
5 36 M
(gets visited.  \(If not, you can't there from here.\)) s
5 20 M
(I'll discuss BFS in the next lecture.) s
376 508 M
(More on the Running Time of DFS) s
376 500 M
(-------------------------------) s
376 492 M
(Why does DFS on an adjacency list run in O\(|V| + |E|\) time?) s
376 476 M
(The O\(|V|\) component comes up solely because we have to initialize all the) s
376 468 M
("visited" flags to false \(or at least construct an array of flags\) before we) s
376 460 M
(start.) s
376 444 M
(The O\(|E|\) component is trickier.  Take a look at the "for" loop of the dfs\(\)) s
376 436 M
(pseudocode above.  How many times does it iterate?  If the vertex u has) s
376 428 M
(outdegree d\(u\), then the loop iterates d\(u\) times.  Different vertices have) s
376 420 M
(different degrees.  Let the total degree D be the sum of the outdegrees of all) s
376 412 M
(the vertices in V.) s
376 396 M
(  D =  sum  d\(v\).) s
376 388 M
(     v in V) s
376 372 M
(A call to dfs\(u\) takes O\(d\(u\)\) time, NOT counting the time for the recursive) s
376 364 M
(calls it makes to dfs\(\).  A depth-first search never calls dfs\(\) more than once) s
376 356 M
(on the same vertex, so the total running time of all the calls to dfs\(\) is in) s
376 348 M
(O\(D\).  How large is D?) s
376 332 M
(- If G is a directed graph, then D = |E|, the number of edges.) s
376 324 M
(- If G is an undirected graph with no self-edges, then D = 2|E|, because each) s
376 316 M
(  edge offers a path out of two vertices.) s
376 308 M
(- If G is an undirected graph with one or more self-edges, then D < 2|E|.) s
376 292 M
(In all three cases, the running time of depth-first search is in O\(|E|\), NOT) s
376 284 M
(counting the time required to initialize the "visited" flags.) s
_R
S
%%Trailer
%%Pages: 2
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
