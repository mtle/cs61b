%!PS-Adobe-3.0
%%BoundingBox: 25 25 587 767
%%Title: Enscript Output
%%For: Jonathan R. Shewchuk
%%Creator: GNU enscript 1.6.4
%%CreationDate: Wed Jan 22 02:46:15 2014
%%Orientation: Landscape
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 4
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 4
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 7 7 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 4
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 742 def
/d_page_h 562 def
/d_header_x 0 def
/d_header_y 526 def
/d_header_w 742 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 742 def
/d_footer_h 0 def
/d_output_w 742 def
/d_output_h 526 def
/cols 2 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 1 def
/fname (01) def
/fdir () def
/ftail (01) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (01/22/14) def
/modtimestr (02:46:13) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 516 M
(                              CS 61B: Lecture 1) s
5 508 M
(                         Wednesday, January 22, 2014) s
5 500 M
(                   Prof. Jonathan Shewchuk, jrs@cory.eecs) s
5 492 M
(         Email to prof & all TAs at once \(preferred\): cs61b@cory.eecs) s
5 476 M
(Today's reading:  Sierra & Bates, pp. 1-9, 18-19, 84.) s
5 468 M
(Handout:  Course Overview \(also available from CS 61B Web page\)) s
5 452 M
(Also, read the CS 61B Web page as soon as possible!) s
5 444 M
(>>>  http://www.cs.berkeley.edu/~jrs/61b  <<<) s
5 436 M
(YOU are responsible for keeping up with readings & assignments.  Few reminders.) s
5 428 M
(The Piazza board is required reading:  piazza.com/berkeley/spring2014/cs61b) s
5 412 M
(Labs) s
5 404 M
(----) s
5 396 M
(Labs \(in 271, 273, 275, 330 Soda\) start Thursday.  Discussion sections start) s
5 388 M
(Monday.  You must attend your scheduled lab \(as assigned by Telebears\) to) s
5 380 M
(  1\)  get an account \(needed for Lab 1 and Homework 1\), and) s
5 372 M
(  2\)  login to turn on your ability to turn in homework \(takes up to 24 hours\).) s
5 364 M
(You may only attend the lab in which you are officially enrolled.  If you are) s
5 356 M
(not enrolled in a lab \(on the waiting list or in concurrent enrollment\), you) s
5 348 M
(must attend a lab that has space.  \(Show up and ask the TA if there's room for) s
5 340 M
(you.\)) s
5 324 M
(You will not be enrolled in the course until you are enrolled in a lab.  If) s
5 316 M
(you're on the waiting list and the lab you want is full, you can change to one) s
5 308 M
(that isn't, or you can stay on the waitlist and hope somebody drops.) s
5 292 M
(If you're not yet enrolled in a lab, just keep going to them until you find one) s
5 284 M
(that has room for you \(that week\).  Once you get enrolled in a lab, though,) s
5 276 M
(please always attend the one you're enrolled in.) s
5 260 M
(Prerequisites) s
5 252 M
(-------------) s
5 244 M
(Ideally, you have taken CS 61A or E 7, or at least you're taking one of them) s
5 236 M
(this semester.  If not, you might get away with it, but if you have not) s
5 228 M
(mastered recursion, expect to have a very hard time in this class.  If you've) s
5 220 M
(taken a data structures course before, you might be able to skip CS 61B.  See) s
5 212 M
(the Course Overview and Brian Harvey \(781 Soda\) for details.) s
5 196 M
(Textbooks) s
5 188 M
(---------) s
5 180 M
(Kathy Sierra and Bert Bates, Head First Java, Second Edition, O'Reilly, 2005.) s
5 172 M
(  ISBN # 0-596-00920-8.  \(The first edition is just as good.\)) s
5 164 M
(Michael T. Goodrich and Roberto Tamassia, Data Structures and Algorithms in) s
5 156 M
(  Java, Fifth Edition, John Wiley & Sons, 2010. ISBN # 0-470-38326-7.) s
5 148 M
(  \(The first/third/fourth/sixth edition is just as good, but not the second.\)) s
5 132 M
(We will use Sierra/Bates for the first month.  Lay your hands on a copy as soon) s
5 124 M
(as possible.) s
5 108 M
(Buy the CS 61B class reader at Vick Copy, 1879 Euclid.  The bulk of the reader) s
5 100 M
(is old CS 61B exams, which will not be provided online.  The front of the) s
5 92 M
(reader is stuff you'll want to have handy when you're in lab, hacking.) s
376 508 M
(Grading) s
376 500 M
(-------) s
376 492 M
(  10 pts  Labs          There are 200 points total you can earn in this course,) s
376 484 M
(  20 pts  Homeworks     broken down at left.  185+ points is an A+, 175-184 is) s
376 476 M
(  70 pts  Projects      an A, and so on down to D- \(85-94\).  There is NO CURVE.) s
376 468 M
(  25 pts  Midterm I     Late homeworks and labs will NOT be accepted, period.) s
376 460 M
(  25 pts  Midterm II    Late projects are penalized 1% of your score for every) s
376 452 M
(  50 pts  Final Exam    two hours by which you miss the deadline.) s
376 444 M
( -------) s
376 436 M
( 200 pts) s
376 420 M
(There will be three projects, worth 20, 30, and 20 points respectively.  You) s
376 412 M
(will do the first project individually, and the last two as part of a group of) s
376 404 M
(two or three students.  You may not work alone on the last two projects.) s
376 396 M
(All homeworks and projects will be turned in electronically.) s
376 380 M
(Cheating) s
376 372 M
(--------) s
376 364 M
(...will be reported to the Office of Student Conduct.) s
376 356 M
(1\)  "No Code Rule":  Never have a copy of someone else's program in your) s
376 348 M
(    possession and never give your program to someone else.) s
376 340 M
(2\)  Discussing an assignment without sharing any code is generally okay.) s
376 332 M
(    Helping someone to interpret a compiler error message is an example of) s
376 324 M
(    permissible collaboration.  However, if you get a significant idea from) s
376 316 M
(    someone, acknowledge them in your assignment.) s
376 308 M
(3\)  These rules apply to homeworks and projects.  No discussion whatsoever in) s
376 300 M
(    exams, of course.) s
376 292 M
(4\)  In group projects, you share code freely within your team, but not between) s
376 284 M
(    teams.) s
376 268 M
(Goals of CS 61B) s
376 260 M
(---------------) s
376 252 M
(1\)  Learning efficient data structures and algorithms that use them.) s
376 244 M
(2\)  Designing and writing large programs.) s
376 236 M
(3\)  Understanding and designing data abstraction and interfaces.) s
376 228 M
(4\)  Learning Java.) s
376 212 M
(THE LANGUAGE OF OBJECT-ORIENTED PROGRAMMING) s
376 204 M
(===========================================) s
376 196 M
(Object:  An object is a repository of data.  For example, if MyList is a) s
376 188 M
(  ShoppingList object, MyList might record your shopping list.) s
376 180 M
(Class:  A class is a type of object.  Many objects of the same class might) s
376 172 M
(  exist; for instance, MyList and YourList may both be ShoppingList objects.) s
376 164 M
(Method:  A procedure or function that operates on an object or a class.) s
376 156 M
(  A method is associated with a particular class.  For instance, addItem might) s
376 148 M
(  be a method that adds an item to any ShoppingList object.  Sometimes a method) s
376 140 M
(  is associated with a family of classes.  For instance, addItem might operate) s
376 132 M
(  on any List, of which a ShoppingList is just one type.) s
376 124 M
(Inheritance:  A class may inherit properties from a more general class.  For) s
376 116 M
(  example, the ShoppingList class inherits from the List class the property of) s
376 108 M
(  storing a sequence of items.) s
376 100 M
(Polymorphism:  The ability to have one method call work on several different) s
376 92 M
(  classes of objects, even if those classes need different implementations of) s
376 84 M
(  the method call.  For example, one line of code might be able to call the) s
376 76 M
(  "addItem" method on _every_ kind of List, even though adding an item to a) s
376 68 M
(  ShoppingList is completely different from adding an item to a ShoppingCart.) s
376 60 M
(Object-Oriented:  Each object knows its own class and which methods manipulate) s
376 52 M
(  objects in that class.  Each ShoppingList and each ShoppingCart knows which) s
376 44 M
(  implementation of addItem applies to it.) s
376 28 M
(In this list, the one thing that truly distinguishes object-oriented languages) s
376 20 M
(from procedural languages \(C, Fortran, Basic, Pascal\) is polymorphism.) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
90 rotate
25 -587 translate
/pagenum 2 def
/fname (01) def
/fdir () def
/ftail (01) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (01/22/14) def
/modtimestr (02:46:13) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
column_lines
do_header
5 508 M
(Java) s
5 500 M
(----) s
5 492 M
(Java allows you to store data in variables, but first you must _declare_ them) s
5 484 M
(and specify their _type_.) s
5 468 M
(    Python:  x = 1       Scheme:  \(let \(\(x 1\)\) \)       Java:  int x;) s
5 460 M
(                                                              x = 1;) s
5 452 M
(This Java declaration does two things.) s
5 444 M
(  \(1\)  It allocates a chunk of memory big enough to store an integer, which) s
5 436 M
(       Java calls type "int".                                               ---) s
5 428 M
(  \(2\)  It names the variable \(chunk of memory\) "x".                       x |1|) s
5 420 M
(                                                                            ---) s
5 412 M
(Variables are used not just to store numbers, but also to _reference_ objects.) s
5 404 M
(There are two ways to get classes of objects to play with:) s
5 396 M
(\(1\)  Use one defined by somebody else.  Java has tons of pre-defined classes) s
5 388 M
(     you can use.  Many come in the "Java standard library" provided with every) s
5 380 M
(     Java compiler.) s
5 372 M
(\(2\)  Define your own.) s
5 356 M
(For example, Java has a built-in class called String.) s
5 340 M
(  String myString;) s
5 324 M
(This does _not_ create a String object.  Instead, it declares a variable \(chunk) s
5 316 M
(of memory\) that can store a _reference_ to a String object.  I draw it as a) s
5 308 M
(box.) s
5 292 M
(           ---) s
5 284 M
(  myString | |                   <-- This box is a variable \(not an object\).) s
5 276 M
(           ---) s
5 260 M
(Initially, myString doesn't reference anything.  You can make it reference a) s
5 252 M
(String object by writing an assignment statement.  But how do we get ahold of) s
5 244 M
(an actual String object?  You can create one.) s
5 228 M
(  myString = new String\(\);) s
5 212 M
(This line performs two distinct steps.  First, the phrase "new String\(\)" is) s
5 204 M
(called a _constructor_.  It constructs a brand new String object.  Second, the) s
5 196 M
(assignment "=" causes myString to _reference_ the object.  You can think of) s
5 188 M
(this as myString pointing to the object.) s
5 172 M
(           ---     ------) s
5 164 M
(  myString |.+---->|    | a String object) s
5 156 M
(           ---     ------) s
5 140 M
(Unlike Scheme and Python, Java programs must be compiled before you can run) s
5 132 M
(them.  _Compilation_ converts your written code to a machine-readable bytecode.) s
5 124 M
(The advantage is a faster program than one written in Scheme.  The disadvantage) s
5 116 M
(is that you have to wait for it to compile.) s
5 100 M
(             Python                      Java) s
5 92 M
(             ------                      ----) s
5 84 M
(       Python program \(.py\)         Java program \(.java\)) s
5 76 M
(               |                           |) s
5 68 M
(               | python                    | javac) s
5 60 M
(               v                           v) s
5 52 M
(             Answer                  .class files) s
5 44 M
(                                           |) s
5 36 M
(                                           | java) s
5 28 M
(                                           v) s
5 20 M
(                                         Answer) s
376 508 M
(Postscript:  Anatomy of a Small Java Program \(for discussion section\)) s
376 500 M
(--------------------------------------------) s
376 492 M
(Assume the following code is in a file called HelloWorld.java:) s
376 476 M
(class HelloWorld {) s
376 468 M
(  public static void main \(String[] args\) {) s
376 460 M
(    System.out.println\("Hello, world"\);) s
376 452 M
(  }) s
376 444 M
(}) s
376 428 M
(The classes are "HelloWorld", "String", and "System".) s
376 420 M
(The objects are "args", "System.out", and the string "Hello, world".) s
376 412 M
(  \(Actually, the first two of these are _references_ to objects.\)) s
376 404 M
(The methods are "main" and "println".  The println method prints its parameter,) s
376 396 M
(and the main method prints the string "Hello, world".) s
376 380 M
(You don't have the knowledge to completely understand this code yet, but don't) s
376 372 M
(worry about it.  We'll take the first two lines on faith as the standard way to) s
376 364 M
(start a Java program.  They'll become clear in the coming weeks.) s
376 348 M
(Let's look at the innermost line first; it does all the action.  "out") s
376 340 M
(references an object whose class is PrintStream.  A PrintStream is a path by) s
376 332 M
(which characters can be output by a program.  The characters that are sent) s
376 324 M
(through "out" find their way to your computer screen.) s
376 308 M
(System is a class which happens to contain the variable out \(among many other) s
376 300 M
(variables\).  We have to write "System.out" to address the output stream,) s
376 292 M
(because other classes might have variables called "out" too, with their own) s
376 284 M
(meanings.) s
376 268 M
("println" is a method \(procedure\) of the class PrintStream.  Hence, we can) s
376 260 M
(invoke "println" from any PrintStream object, including System.out.  "println") s
376 252 M
(takes one parameter, which can be a string.) s
376 236 M
("main" is a method in the "HelloWorld" class.  The HelloWorld class knows how) s
376 228 M
(to do the "main" operation, just like the PrintStream class knows how to do the) s
376 220 M
("println" operation.) s
376 212 M
(                                                  ------------------------) s
376 204 M
(    ------------------   ----------------------   |                      |) s
376 196 M
(    |                |   |                    |   |                      |) s
376 188 M
(    |        ---     |   |  println \(method\)  |   |                      |) s
376 180 M
(    |    out |.+-----+-->|                    |   |                      |) s
376 172 M
(    |        ---     |   |                    |   |    main \(method\)     |) s
376 164 M
(    --System \(class\)--   --An object of class--   |                      |) s
376 156 M
(                              PrintStream         |                      |) s
376 148 M
(                                                  ---HelloWorld \(class\)---) s
376 132 M
(The classes System and PrintStream are all automatically provided for you by) s
376 124 M
(any Java compiler.  Somebody has programmed them for you, so that you don't) s
376 116 M
(have to figure out for yourself how to send characters to the terminal.) s
_R
S
%%Trailer
%%Pages: 2
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
